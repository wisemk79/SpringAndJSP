2일차(Git,GitHub 연동방법)

Review

Git->네트워크 분산환경(각자 컴퓨터(로컬저장소)c:\imsi)---->웹상에 공유사이트
                                                                                       원격저장소
브랜치(branch)?=>프로젝트 작업영역(개인)

완벽한 분산 환경에서 빠르고 단순하게 수백 수천 개의 동시 
발적인 브랜치 작업을 수행하는 것을 목표로 하는 버전 관리 시스템

** 버전 관리 시스템(형상관리) **

->여러명의 공통 프로젝트를 관리->시스템(공통으로 사용하는 파일,폴더)
------------------------------------------------------------------------
***Git의 특징***

1.로컬(git init)  및 원격 저장소 생성=>저장소(용어)-->개인폴더
2.로컬 저장소에 파일 생성 및 추가 ->c:\imsi\test.txt
3.수정 내역을 로컬 저장소에 저장 ->vim편집기->i->esc키 shift : wq
4.파일 수정 내역 추적(변경사항을 체크하기위해) ->git add 파일명
5.원격 저장소에 제출된 수정 내역을 로컬 저장소에 적용 ->
  git commit ->커밋메세지 작성 (파일작성->탐색기에 언제 저장 날짜 기록)
                    (지금까지 작업한 내용의 대표적인 문자열 키워드를 입력->저장)
--------------------------------------------------------------------------------------
6.Master에 영향을 끼치지 않는 브랜치 생성--->브랜치
7.브랜치 사이의 병합(Merge)------------------>병합
8.브랜치를 병합하는 도중의 충돌 감지->해결책
=====================================
-->특정 다른 영역으로 이동X(checkout)

 프로젝트
*******************************************************************************
   test.txt(공유시킬 파일들)->git add 명령어->git에게 알려주는역할
                                                            내용의 수정을 기록(추적)
*******************************************************************************

 브랜치(branch)=>프로젝트 작업영역(개인)->비유) 같은 공간인데 서로 다른 시간대에서
                                                                        작업느낌

A (master)                      B(새로운 브랜치->hotfix)
print("hello world")        print("hello world")
                                 print("~")
----------------------      -----------------------------------
insert,update,delete,--->상대방은 insert,,,X ->commit

$git status->현재 상태를 확인(commit을 이미 한 상태)
                   commit을 해야 된다고 알려준다.
====================================

$ git add test.txt ->각자 작업한 파일의 내용을 기록하라(git)

warning: LF will be replaced by CRLF in test.txt.
The file will have its original line endings in your working directory.
=>리눅스형태로 파일저장(경고 메세지)->저장에는 문제 없다.

->commit->파일에다가 커밋메세지를 작성하고나서 빠져나가게 되어있다.

$ git commit
->커밋 메세지를 작성->저장->종료->최종 마무리

[master (root-commit) 4869169] create file "hello world" programm
 1 file changed, 1 insertion(+)
 create mode 100644 test.txt

$ git status=>현재 저장소 상태를 체크해주는 명령어

On branch master
nothing to commit, working tree clean
->커밋할 내용이 없다.(현재 여기에서 작업할 내용이 없다는 표시)->정상
-----------------------------------------------------------------------
clear->커서가 맨위로 이동(화면 지우기)

------------------------------------------------------
$ git branch -->브랜치 목록을 확인할때 사용

* master -->현재 작업중인 브랜치명 앞에 *이 표시

$ git branch 생성시킬 브랜치명(hotfix)

$ git branch hotfix

$ git branch
  hotfix  =>새로 추가된 브랜치 확인
* master

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
*************************************************************
반드시 하나의 브랜치에서 다른 브랜치로 전환할경우에는
반드시 git commit을 사용해서 마무리를 한뒤에 가능하다.
*************************************************************
$ git checkout 이동할 브랜치명
$ git checkout hotfix
Switched to branch 'hotfix'  //master->hotfix

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)

$ ls->디렉토리 내용을 확인(dir)
$ cat test.txt
print("hello world")  ===>master작업한 내용을 확인

-----------------------
            test.txt(공통파일)~.jsp~.html
             ,,,,

master                                 hotfix
print("hello world")           print("hello world")
                                    print("Tell your World");->추가
                         merge(병합)
==================================
(hotfix)
  test.txt

vim test.txt

i(끼워넣기)->print("Tell your World");
esc키 누르고 shift :->wq
-----------------------------------------
 파일의 내용을 수정->git add,git commit
                                   X
** git add->새로 추가된 파일의 경우에 한번만 지정
-------------------------------------------------
commit=>파일이 하나,파일 동시에 작업->한꺼번에 commt
               ->내용을 수정할때마다 작성

***  git commit -a->하나이상의 파일을 commit설정할때 사용
     git commit ->한개의 파일에 대해서 comit할때
------------------------------------------------------------
그래픽->이클립스->커밋할 대상파일들을 전부 check->한꺼번에 커밋

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git status
On branch hotfix
nothing to commit, working tree clean
  =>깨끗하게 파일의 내용을 수정했고 git이 인식했음을 의미
      하는 메세지

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git checkout master
Switched to branch 'master'

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
===============================================
결론:하나의 공통의 파일을 서로 다른 작업영역(브랜치)에서 작업이
       가능하다.
=====================================>git의 의미(=특징)


master,hotfix,hotfix2,,,,
--------------------------------------------------------------
 하나 파일이상을 공유해서 작업->합치는 작업(병합)

(핵심)
master,                                             hotfix
 test.txt                                        test.txt
print("hello world")                       print("hello world")
                                                print("Tell your world")
                                                 ,,,
=========================================
병합할때 

*** 같은 라인에 서로 다른 내용이 들어가 있으면 충돌=>git에서 충돌에러

**********************************중간 점검 명령어*********************************************
1.git init->로컬 저장소를 생성시키는 명령어(c:\imsi)->master
2.git add 수정한 파일명==>이 파일에 변동사항을 브랜치별로 기록
               test.txt
3.git commit->파일을 수정할때 마다 최종적으로 commit 메세지저장
                   ->git log

4.git branch->현재 브랜치 목록을 확인
5.git branch 생성시킬 브랜치명(hotfix)
6.git checkout 이동할 브랜치명
----------------------------------
7.git merge 병합할 브랜치명
************************************************

   master   hotfix


git merge hotfix

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ git merge hotfix
Updating 4869169..35358e2
Fast-forward
 test.txt | 1 +
 1 file changed, 1 insertion(+)

********************************************************
=>master입장에서 hotfix에서의 새롭게 추가된 내용을
    내 파일에 반영해달라(합쳐달라=병합해달라)
************************************************************

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ cat test.txt
print("hello world")
print("Tell your World")

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)

----------------------------충돌날때 어떻게 수정하는가?------------------------------

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ vim test.txt

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ cat test.txt
print("hello World");
print("Tell your World");
print("Tell his World");

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ git commit -a
hint: Waiting for your editor to close the fi[master d3144fb] added output "Tell his World"
 1 file changed, 1 insertion(+)

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)

master->내용추가(test.txt) =>print("Tell his World")

******************************************************************************************
$ git commit -a -m "print Tell his World"  =>vim명령어로 커밋메세지를 사용하지 않고
                                                            편집기 밖에서 커밋메세지를 사용하는 방법
[master c355d33] print Tell his World
 1 file changed, 1 insertion(+)

-------------------------------------------------------------
git checkout hotfix

Switched to branch 'hotfix'

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ vim test.txt

  ->print("Tell her World");//추가->저장->빠져나가기
  ->git commit -a -m "print Tell her world"
--------------------------------------------------------------
kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git checkout master
error: Your local changes to the following files would be overwritten by checkout:
        test.txt
Please commit your changes or stash them before you switch branches.
Aborting

 =>반드시 다른 브랜치로 이동하기위해서는 지금까지 작업한 내용을
     반드시 커밋을 해야 이동할 수 있다는 에러메세지(등록한 사용자이름 메일등록)
====================================

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git commit -a
hint: Waiting for your editor to close the [hotfix e7ca045] added output "Tell her World"
 1 file changed, 1 insertion(+)

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ cat test.txt
print("hello World");
print("Tell your World");
print("Tell her World");

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ cat test.txt
print("hello World");
print("Tell your World");
print("Tell his World");

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ git merge hotfix
Auto-merging test.txt
CONFLICT (content): Merge conflict in test.txt
Automatic merge failed; fix conflicts and then commit the result.

kitcoop@kitcoop-PC MINGW64 /c/imsi (master|MERGING)
$ cat test.txt
print("hello World");
print("Tell your World");
<<<<<<< HEAD
print("Tell his World");
=======
print("Tell her World");
>>>>>>> hotfix

kitcoop@kitcoop-PC MINGW64 /c/imsi (master|MERGING)
$ vim test.txt

kitcoop@kitcoop-PC MINGW64 /c/imsi (master|MERGING)
$
====================================
git commit -a =>편집기로 들어가서 내용을 수정->저장 -> 불편하다.

---------------------------------------------------------
**git commit -a -m "커밋메세지" ->바로 반영이 된다.
================================
kitcoop@kitcoop-PC MINGW64 /c/imsi (master|MERGING)
$ git commit -a -m "conflict resolved"
[master be2346f] conflict resolved

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ cat test.txt
print("hello World");
print("Tell your World");
print("Tell his World");
print("Tell her World");


kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ git checkout hotfix
Switched to branch 'hotfix'

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ cat test.txt
print("hello World");
print("Tell your World");
print("Tell her World");

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$
===============지금까지 작업한 내용을 로그로 기록(확인)=====================
kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ git log -p
commit be2346fd30f2f54686f2a6bbf352b58b5fb8341a (HEAD -> master)
Merge: d3144fb e7ca045
Author: yeansu lee <nup49rok1@empas.com>
Date:   Fri Mar 8 11:19:57 2019 +0900

    conflict resolved

commit e7ca0451972119d2c97a7bbac8e0de1f96476197 (hotfix)
Author: yeansu lee <nup49rok1@empas.com>
Date:   Fri Mar 8 11:03:57 2019 +0900

    added output "Tell her World"

diff --git a/test.txt b/test.txt
index ac89027..b39bec5 100644
--- a/test.txt
+++ b/test.txt
@@ -1,2 +1,3 @@
:
,,,
q를 입력하면 빠져나감

hotfix->내용추가(test.txt)  =>print("Tell her World")
==============================

 GitHub(Git을 이용해서 전세계에 업로드,다운로드를 자유롭게 할 수 있는 공유사이트)

1.전 세계에서 진행되는 오픈 소스 프로젝트가 많이 모여 있어 이에 참여하고 오픈소스에 기여할 수 있는 기회가 있다.
                                 ===========
2.개발자는 GitHub를 이용해 자신이 작성했던 코드 그 자체를 곧바로 제공이 가능
           public -> private(money)

3.작업한 내용을 포트폴리오로 준비해 공개

4.기획자 역시 자신이 준비했었던 기획문서를 공개할 수 있다

https://github.com

 계정명,이메일주소(인증 링크문자열이 전달),암호

https://github.com/nup49rok1/test.git =>외부에서 접속가능한 원격저장소 주소

===실습2 (로컬저장소(c:\imsi) <------>원격저장소(GitHub)(공유사이트)

원격연결 =>git clone->원격저장소의 내용을 로컬저장소(내컴퓨터로)로 복사하라
                 query-ui=>원격저장소의 내용을 가져올 대상자
                 ....
*****************************************************
https://github.com/nup49rok1/jquery-ui =>직접 온라인(url에 입력)
                                                              =>다운로드를 받아서 가져간경우
                                                                   Clone or Download

https://github.com/nup49rok1/jquery-ui.git=>원격저장소 주소
https://github.com/nup49rok1/jQuery-File-Upload.git
******************************************************
형식) git clone 원격저장소 주소

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ git clone https://github.com/nup49rok1/jquery-ui.gitCloning into 'jquery-ui'...
remote: Enumerating objects: 66483, done.
remote: Total 66483 (delta 0), reused 0 (delta 0), pack-reused 66483
Receiving objects: 100% (66483/66483), 25.86 MiB | 1.53 MiB/s, done.
Resolving deltas: 100% (49266/49266), done.

 ==>다운로드가 됨을 확인이 가능

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ cd jquery-ui

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ ls
jquery-ui/  test.txt

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ cd jquery-ui

kitcoop@kitcoop-PC MINGW64 /c/imsi/jquery-ui (master)
$ ls
AUTHORS.txt  CONTRIBUTING.md  Gruntfile.js  README.md  ui/
bower.json   demos/           LICENSE.txt   tests/
build/       external/        package.json  themes/

kitcoop@kitcoop-PC MINGW64 /c/imsi/jquery-ui (master)
$ cat package.json
{
,,,,
========================================
로컬저장소<--->원격저장소를 연결
               원격연결

연결시키기 위해서 필요 ->git remote 명령어

https://github.com/nup49rok1/test.git

***************************************************************
git remote add 원격저장소별칭명   원격저장소 주소명
                      origin(master 대용)
******************************************************************
KITCOOP@DESKTOP-NS8DN1S MINGW64 /c/imsi/jQuery-File-Upload (master)
$ cd ~  =>처음 실행할때의 홈디렉토리로 이동

KITCOOP@DESKTOP-NS8DN1S MINGW64 ~
$ pwd
/c/Users/KITCOOP(계정이름->홈디렉토리)

KITCOOP@DESKTOP-NS8DN1S MINGW64 ~
$ cd /c/imsi

KITCOOP@DESKTOP-NS8DN1S MINGW64 /c/imsi (master)


******************************************************************

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ git remote -v  =>연결되어있는 원격저장소 목록을 확인할때 사용

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ git remote add origin https://github.com/nup49rok1/test.git
kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ git remote -v
 
 업로드 및 다운로드용
origin  https://github.com/nup49rok1/test.git (fetch)
origin  https://github.com/nup49rok1/test.git (push)

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)

******************************************************
git remote rm 삭제시킬 원격저장소 이름

$git remote rm origin
$git remote -v
$ git remote add origin https://github.com/nup49rok1/test.git
$git remote -v

*******************************************************
git push ->로컬저장소의 내용->원격저장소로 올리기

************************************************************************
fatal: The current branch master has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin master

  =>어떠한 브랜치를 가진 내용을 올린것인지 지정해 주지 않아서 발생된
       에러메세지

  =>git push 원격저장소 별칭명 --all (모든 브랜치)
kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$
  =>git push origin --all
kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ git push origin --all
Enumerating objects: 15, done.
Counting objects: 100% (15/15), done.
Delta compression using up to 4 threads
Compressing objects: 100% (8/8), done.
Writing objects: 100% (15/15), 1.17 KiB | 1.17 MiB/s, done.
Total 15 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), done.
remote:
remote: Create a pull request for 'hotfix' on GitHub by visiting:
remote:      https://github.com/nup49rok1/test/pull/new/hotfix
remote:
To https://github.com/nup49rok1/test.git
 * [new branch]      hotfix -> hotfix
 ! [rejected]        master -> master (fetch first) =>거절
error: failed to push some refs to 'https://github.com/nup49rok1/test.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ git remote -v
origin  https://github.com/nup49rok1/test.git (fetch)
origin  https://github.com/nup49rok1/test.git (push)

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ git push origin hotfix
Everything up-to-date

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$
<?   -><%
  
?>        %>
=====================================
========================================
kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ ls
jquery-ui/  test.txt

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ vim imsi.txt ->입력->esc키 shift: wq
--------------------------------------------------
   리눅스 명령어->파일을 생성=>내용을 저장시키는 방법
                      1)vim 생성할 파일명->내용을 저장->:wq

*************************************************************
  cat명령어->  1)생성된 파일의 내용을 확인        
                ** 2)처음부터 파일을 생성->내용이 저장

$ cat >> imsi.txt  =>cat >> 생성할 파일명  enter
     리다이렉트기호  >> (출력용 기호)
                           << (입력용 기호)
--------------------------------------------------
dakdakdakad
ad'ad'da'dada'ad'ad
ad
da
ad
add
a
adgkgkgkaka
dd
ad
d
ad
ad
----------------->다 입력한 후 ^Z(ctrl+z) 입력하면 파일이 생성이 된다.

[1]+  Stopped                 cat >> imsi.txt

$ cat imsi.txt
dakdakdakad
ad'ad'da'dada'ad'ad
ad
da
ad
add
a
adgkgkgkaka
dd
ad
d
ad
ad
-----------------------------------------------------------
kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ ls
imsi.txt  jquery-ui/  test.txt

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git add imsi.txt
warning: LF will be replaced by CRLF in imsi.txt.
The file will have its original line endings in your working y

 =>윈도우와 리눅스의 저장방식이 다르기때문에 에러유발
 

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git config --global core.autocrlf true  =>유닉스방식으로 데이터를 저장

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git add imsi.txt

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ 

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git commit -m "remote repository add a imsi.txt"
[hotfix 2f7be3b] remote repository add a imsi.txt
 1 file changed, 13 insertions(+)
 create mode 100644 imsi.txt

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git push origin hotfix
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 4 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 326 bytes | 326.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/nup49rok1/test.git
   e7ca045..2f7be3b  hotfix -> hotfix

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$

https://github.com/nup49rok1/command_hello222.git

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git remote add origin https://github.com/nup49rok1/command_hello222.git
kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git remote -v
origin  https://github.com/nup49rok1/command_hello222.git (fetch)
origin  https://github.com/nup49rok1/command_hello222.git (push)

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git push origin hotfix
Enumerating objects: 12, done.
Counting objects: 100% (12/12), done.
Delta compression using up to 4 threads
Compressing objects: 100% (7/7), done.
Writing objects: 100% (12/12), 1.04 KiB | 1.04 MiB/s, done.
Total 12 (delta 0), reused 0 (delta 0)
To https://github.com/nup49rok1/command_hello222.git
 * [new branch]      hotfix -> hotfix  =>내 hotfix의 내용=>상대방에게도 
                                                                                     hotfix만들어서
                                                                                     내용을 저장
=============================================
kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)

***********************************************************************************
git clone=>로컬저장소<----원격저장소로 내용을 복사
git remote add
                rm ->원격저장소와 연결,해제
git push 원격저장소의 별명 내 로컬저장소의 브랜치면(or --all (모든 브랜치의)
             내용을 올리기

---------------------------에러메세지를 발생(분석)------------------------------------------------------
   
 로컬 master --->원격 master로 데이터 올리기 실패 ?
       commit수          commit수가 같아야 된다.=>파일의 정보내용이 서로 같아야 된다.
        test.txt          test.txt                               (동기화해야 된다.)
          4줄              3줄


**********************************************************************************
git fetch  ->원격 저장소의 커밋정보들을 가져옴(작업한 내용)
--------------------------------------------------------------------
                          +
                로컬 저장소의 작업과 병합(수동)-> git merge(병합)
                원격 저장소에 반영=>올린다.

****************************************************************************
KITCOOP@DESKTOP-NS8DN1S MINGW64 /c/imsi (master)
$ git add imsi.txt
warning: LF will be replaced by CRLF in imsi.txt.
The file will have its original line endings in your working directory

KITCOOP@DESKTOP-NS8DN1S MINGW64 /c/imsi (master)
$ git config --global core.autocrlf true  =>엔터 때문에 생기는문제를 자동변환

KITCOOP@DESKTOP-NS8DN1S MINGW64 /c/imsi (master)
$ git add imsi.txt

KITCOOP@DESKTOP-NS8DN1S MINGW64 /c/imsi (master)

$ git commit -a -m " remote repository add a test.txt"

KITCOOP@DESKTOP-NS8DN1S MINGW64 /c/imsi (master)
$ git commit -a -m " remote repository add a test.txt"
[master 1142c99]  remote repository add a test.txt
 1 file changed, 6 insertions(+)
 create mode 100644 imsi.txt

******************************************************************************
 ==>git fetch(변경사항을 반영시켜주는 명령어)+git push(로컬->원격)
       ===========================>수동 작업=>git diff=>원인을 알 수 있다.

git pull   -> 원격 저장소의 커밋정보들을 가져와(git fetch)
                서 자동으로 로컬 브랜치에 병합  (자동)->git merge
                수행(단점 변경사항을 알 수없다)=>에러가 발생=>

$git remote rm origin
$git remote -v
$ git remote add origin https://github.com/nup49rok1/test.git
$git remote -v             ==============>문제가 있는 원격저장소 삭제하고 새로
                                                              추가

  * =>command_hello 새로 작성=>원격연결->c:/imsi/text.txt=>master에 올리기
https://github.com/nup49rok1/command_hello.git

$ git remote add origin https://github.com/nup49rok1/command_hello.git
$ git remote -v
KITCOOP@DESKTOP-NS8DN1S MINGW64 /c/imsi (master)
$ git push origin master
Enumerating objects: 18, done.
Counting objects: 100% (18/18), done.
Delta compression using up to 12 threads
Compressing objects: 100% (10/10), done.
Writing objects: 100% (18/18), 1.44 KiB | 490.00 KiB/s, done.
Total 18 (delta 3), reused 0 (delta 0)
remote: Resolving deltas: 100% (3/3), done.
To https://github.com/nup49rok1/command_hello.git
 * [new branch]      master -> master

  =>rejected(X)

KITCOOP@DESKTOP-NS8DN1S MINGW64 /c/imsi (master)
$

  로컬저장소(master)     -----------원격저장소(master)
     test.txt                                     X ->파일을 올려준 경우
                                               test.txt(내용을 추가)

**********************원격저장소의 test.txt파일을 수정************************************************
//For commit GitHub tutorial
//GitHub modification
print("hello worlld");
print("Tell your World");
print("Tell his World");
print("Tell her World");


커밋 메세지 
test.txt remote added

==>브라우저 문제때문에 저장이 안된경우=>IE(X)
==>크롬으로 작업->저장이 된다.
=============================

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)=>대신에 master에서 작업한 경우임
$ vim test.txt

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git commit -a -m "test.txt modification Local repository"[hotfix cb33a67] test.txt modification Local repository
 1 file changed, 2 insertions(+)

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git status
On branch hotfix
Untracked files:
  (use "git add <file>..." to include in what will be committed)

        jquery-ui/

nothing added to commit but untracked files present (use "git add" to track)

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git push origin hotfix    =>git push origin(원격) hotfix(로컬)
-----------------------------------------
To https://github.com/nup49rok1/command_hello222.git
 ! [rejected]        hotfix -> hotfix (fetch first)
error: failed to push some refs to 'https://github.com/nup49rok1/command_hello222.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

 ==>로컬,원격저장소의 같은 파일이라도 서로 같은 라인의 서로다른 내용을 저장
 ===>저장되는 내용이 서로 다르다(=>커밋수가 다르다)

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$

$ git fetch  ->로컬저장소 정보== 원격저장소 정보
remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.
From https://github.com/nup49rok1/command_hello222
   2f7be3b..20873d3  hotfix     -> origin/hotfix

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git merge origin/hotfix
Auto-merging test.txt
CONFLICT (content): Merge conflict in test.txt
Automatic merge failed; fix conflicts and then commit the result.

   ==>로컬저장소의 test.txt   ----->원격저장소의 test.txt의 파일의 내용이
          같은라인에 서로 다른 내용이 들어가있으면 병합이 안된다는 에러메세지가
          출력

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix|MERGING)

$ git diff
diff --cc test.txt
index 1bf4782,edb7f93..0000000
--- a/test.txt
+++ b/test.txt
@@@ -1,5 -1,5 +1,10 @@@
++<<<<<<< HEAD
 +//For command line git tutorial
 +//Local repository modification
++=======
:
,,,

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix|MERGING)
$ vim test.txt

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix|MERGING)
$ git commit -a -m "conflict resolved GitHub"
[hotfix a5b86ad] conflict resolved GitHub

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git push origin hotfix
               ====(원격) hotfix(로컬의 브랜치명)

Enumerating objects: 10, done.
Counting objects: 100% (10/10), done.
Delta compression using up to 4 threads
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 759 bytes | 759.00 KiB/s, done.
Total 6 (delta 0), reused 0 (delta 0)
To https://github.com/nup49rok1/command_hello222.git
   20873d3..a5b86ad  hotfix -> hotfix

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$
=====================================
KITCOOP@DESKTOP-NS8DN1S MINGW64 /c/imsi (master)
$ git merge origin/master
Auto-merging test.txt
CONFLICT (content): Merge conflict in test.txt
Automatic merge failed; fix conflicts and then commit the result.

KITCOOP@DESKTOP-NS8DN1S MINGW64 /c/imsi (master|MERGING)
$ git diff
diff --cc test.txt
index 9958706,41cb3b8..0000000
--- a/test.txt
+++ b/test.txt
@@@ -1,5 -1,5 +1,10 @@@
++<<<<<<< HEAD
 +//Local Repository test

KITCOOP@DESKTOP-NS8DN1S MINGW64 /c/imsi (master|MERGING)
$ vim test.txt

KITCOOP@DESKTOP-NS8DN1S MINGW64 /c/imsi (master|MERGING)
$ cat test.txt
//Local Repository test
//test.txt modified Local
//For commit GitHub tutorial
//GitHub modification

print("hello worlld");
print("Tell your World");
print("Tell his World");
print("Tell her World");


KITCOOP@DESKTOP-NS8DN1S MINGW64 /c/imsi (master|MERGING)
$ git commit -a -m "conflict resolved GitHub"
[master 655125d] conflict resolved GitHub

KITCOOP@DESKTOP-NS8DN1S MINGW64 /c/imsi (master)
$ git push origin master
Enumerating objects: 10, done.
Counting objects: 100% (10/10), done.
Delta compression using up to 12 threads
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 703 bytes | 703.00 KiB/s, done.
Total 6 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), done.
To https://github.com/nup49rok1/command_hello.git
   87b7365..655125d  master -> master

KITCOOP@DESKTOP-NS8DN1S MINGW64 /c/imsi (master)
$
=====================================

 ->원격저장소를 클릭->새로 고침이 반영=>확인할 수 가 있다.
==================================
=>자동 ->git pull을 사용=>상대방의 커밋정보를 가져와서
                                       맞춰주고 가져온다.
                                에러발생->고치고 나서 comiit을 수행한후  git pull
--------------------------------------------------------------
  원격저장소의 내용을 변경---->로컬저장소에 바로 반영을 하라

  로컬저장소의 내용대로--->원격저장소가 변경이 되는 경우
===========================================

   로컬------------------->원격저장소
           git fetch->git push

   로컬 <------------------원격저장소
             git pull(자동으로 )=>git fetch를 사용하지 않아도 자동으로 실행
==================================================

//First GitHub modification

//Second Local repository modification

print("hello World");
print("Tell your World");
print("Tell her World");

print("Tell My World")===>이 부분만 추가한 경우
=============================

 커밋 메세지 
  GitHub for git pull

 저장
============================
로컬저장소<----원격저장소의 변경내용을 자동
                      가져오고->git fetch
                      자동병합->git merge
                      문제생김->git diff
                       =====>자동으로 이 세가지를
                          함꺼번에 해주는 명령어
                      git pull를 사용할것.

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ git pull origin hotfix=>git pull origin master
remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.
From https://github.com/nup49rok1/command_hello222
 * branch            hotfix     -> FETCH_HEAD
   a5b86ad..88e2cbf  hotfix     -> origin/hotfix
Updating a5b86ad..88e2cbf
Fast-forward
 test.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$ cat test.txt
//First GitHub modification
//Second Local repository modification
print("hello World");
print("Tell your World");
print("Tell her World");
print("Tell My World")  =>반영이 된것을 확인할 수가 있다.

kitcoop@kitcoop-PC MINGW64 /c/imsi (hotfix)
$

===============>객관식 시험범위===============>

