1일차(오후) Git의 개요 및 작성방법
 
 =>면접 git 사용=>리눅스 간단한 명령어,=>그래픽

                      프로젝트 팀->4~5명(각자 코딩작업)
                                      모델링,디자인 (팀원 업무)
                                    ->공지사항,답변형,회원관리,메인페이지(디자인)
                                    
                                 ** 로컬저장소(작업한 내용이 들어 있는 폴더)
                                =>Git설치->개요 ,사용법

                                웹상에 존재->** 원격저장소
                                =>github
                               =>이클립스(로컬저장소) 와 원격저장소 연결
                               ==>파일(push) 와 다운로드(병합)

KITCOOP@DESKTOP-NS8DN1S MINGW64 ~
$

-------------------------------------------------------------------------------
                         
브랜치(branch)?=>프로젝트 작업영역(개인)
--------------------------------------------------
버전 관리 시스템(형상관리)

개요)
완벽한 분산 환경에서 빠르고 단순하게 수백 수천 개의 동시 
발적인 브랜치 작업을 수행하는 것을 목표로 하는 버전 관리 시스템

->여러명의 공통 프로젝트를 관리->시스템(공통으로 사용하는 파일,폴더)
------------------------------------------------------------------------
***Git의 특징***

1.로컬  및 원격 저장소 생성=>저장소(용어)-->개인폴더
2.로컬 저장소에 파일 생성 및 추가==>데이터 저장 가능
3.수정 내역을 로컬 저장소에 저장  =>작업할때 마다 수정된 데이터를 저장가능

** 4.파일 수정 내역 추적(변경사항을 체크하기위해)=>지금까지 작업한 내용을 확인
                                                                      하는 작업->추척

5.원격 저장소(공유)에 제출된 수정 내역을 로컬 저장소에 적용
6.** Master에 영향을 끼치지 않는 ** 브랜치 생성--->브랜치
7.브랜치 사이의 **병합(Merge)------------------>병합
8.브랜치를 병합하는 도중의 충돌 감지=>문제가 발생->어떻게 문제 해결
==================================
***************************************************************
1.Git의 실습(Local)
2.GitHub의 개요 및 사용법(Remote)
3.GitHub와 이클립스와의 연동방법
***************************************

C:\Program Files\Git ->설치경로

설치유형
Git Bash Only->콘솔작업(도스모드)->각자 Local
Git GUI Only->그래픽(GitHub hub)

Git 사용명령어->리눅스 명령어를 이용 사용

Use Git from Git Bash only->개념,간단한 명령어

*Use Git from Window~=>PATH에 Git정보 추가->사용

=======
브랜치
master
checkout
commit
간단한 명령어 사용
====== 유닉스 또는 리눅스 환경

KITCOOP@DESKTOP-NS8DN1S MINGW64 ~
계정명     컴퓨터명

1. 현재 위치

$pwd

/c/Users/kitcoop=>현재 작업위치

2.git(개인 컴퓨터)---->github와 연결
계정명,이메일 주소

 git으로 시작하는 명령어를 사용

--로컬 저장소(작업영역) =>workspace

git config -–global user.name “사용자 이름(영문이니셀)”
git config -–global user.email “이메일(정확)”

****************************************
$ ->일반유저로 현재 접속한 상태
# ->관리자로 현재 접속한 상태 표시
****************************************
 cd 이동할 위치(.. ,./~) -> . 현재디렉토리,  .. 상위디렉토리

mkdir 디렉토리명->디렉토리생성
<->rmdir 삭제시킬 디렉토리명
----------------------------------------------------------
c:\imsi (작업영역) =>workspace

        test.txt,,,,프로젝트 파일(내용추가)(하나의 파일->여러 사람)
     (공유)
A              B

cd imsi=>c:\imsi->각자 데이터를 따로 저장할 수있는 영역을 생성
                         -> 로컬 저장소(자기만 사용할 수 있는 공간)

$git --help->도움말 확인

 화면지우기->clear
 --------------------------------------------------

** $git init
                          팀원끼리 공유->github에 가입->원격저장소
$ git init
Initialized empty Git repository in C:/imsi/.git/
                                                             숨김파일->환경설정파일
                                                              .으로 시작하는 파일명
                                                          ->폴더도 파일로 취급을 한다.

$ ls =>폴더안에 들어가있는 내용을 보여줄때 사용하는 명령어

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$ ls -al =>숨김파일까지 보여주세요(-al)

total 16
drwxr-xr-x 1 kitcoop 197121 0 3월   7 15:42 ./
drwxr-xr-x 1 kitcoop 197121 0 3월   7 15:37 ../
drwxr-xr-x 1 kitcoop 197121 0 3월   7 15:42 .git/

kitcoop@kitcoop-PC MINGW64 /c/imsi (master)
$
=================================================
1. Git의 특징,사용명령어->콘솔에서 작업 (용어 정리)->저장소,브랜치,커밋,,,
2. Git<-->GitHub 사용법(공유사이트)->작업파일(소스파일)다운로드 공유
3. *** 이클립스 작업<->GitHub ***(그래픽+용어 정리)
==================================================

 git init=>로컬저장소가 되면서 동시에 하나의 작업영역을 생성해주는데 
              브랜치(master) 생성           (좁은 의미)

1.로컬 저장소를 생성->브랜치를 하나 생성시켜준다.(master)
 (=>내가 작업할 영역폴더)
(master)

**********************************************************************
** 2.브랜치=>공통으로 사용이 되는 파일을 각자의 영역에서 아무런
                  충돌없이 사용할 수있도록 해주는 영역(공유)

-----------------------------------------------------------------------
텍스트파일을 하나 생성 (test.txt)->파일을 추가,수정,,,
                               test.py(자동으로 파이썬이 설치)

vim->편집기를 실행시키는 명령어
vi,->vim 생성시킬 파일명->파일이 하나 생성->편집기가 생성
      vim test.txt

빈문서

파일에 내용 추가->i키(insert)->커서가 이동->글자를 입력
print("hello world");

esc키를 누르고 shift : =>지금까지 작업한 내용을 저장하고 준비
                          ->직접 명령어 모드로 전환

직접명령어 모드
:wq enter->파일저장->종료하라.
  write quit

 vim test.txt

---------------------------------------------------
$ 파일의 내용을 확인->cat 경로포함해서 파일명
$cat test.txt  =>파일의 내용만을 확인할때 사용

$ cat test.txt============>공통으로 프로젝트 작성
print("hello world")

=>개발시간->한달->기존의 내용+수정

-->특정파일의 내용을 추가,수정->반드시

 -->지금 현재까지 작업한 내용 좀 알려주세요->git status=>저장->마무리
 파일 저장->종료

--------------------------------------------------------------------------------
 git add 명령어------------------>작업한 내용을 병합(합칠때)
                                            작업파일로 설정(추적파일로 설정)

 commit 명령어를 사용->작업한 내용을 git에게 알려주는 역할
                                   (수정,삭제,,,)
=>exit 프로그램 종료
-----------------------------------------------------------------------------
