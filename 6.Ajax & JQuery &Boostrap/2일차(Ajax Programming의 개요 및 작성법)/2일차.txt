2일차(Ajax Programming의 개요 및 작성법)

JSP책 7장 Ajax 개요(p223)그림 O->사용X->JQuery
           =>실무예제 ->Ajax 사용O =>JQuery->p161~

 오후 4:10 JSP 중간점검 시험 O (25문제)

(jsp 1일차->이번주 까지 시험범위)->jsp,git,ajax,jQuery 일부
=========================================

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>3.domob2.html(객체생성방법2)</title>
<script>
    
    function test2(){ //public Student(String ~)
    	//형식) var 객체명=new Object();//형이 정해져 있지 않다.=>알아서 객체를 저장
    	// var Student=new Student();//학생만 저장
    	var mem=new Object();
    	//동적으로 멤버변수를 선언해서 사용이 가능->객체명.동적멤버변수명=저장할값
    	mem.name="테스트";//객체명.name="홍길동"
    	mem.id=1234;//this.grade=1
    	mem.hobby="바둑";
    	mem.sung="여"; //private String sung="여";(X) 선언하지 않고 직접 만들어서 저장
    	
    	//1.Setter Method->public void setId(int id) {this.id=id}
    	//형식) 객체명.함수명=function(매개변수명) {this.속성명=값}
    	mem.setHobby=function(hobby){
    		this.hobby=hobby;//this.hobby="음악감상"
    	}
    	//2.Getter Method->public 반환값 get멤버변수명(){ return this.멤버변수명;}
    	//형식) 객체명.함수명=function(){ return this.멤버변수명(=속성명)}
    	mem.getHobby=function(){
    		return this.hobby;
    	}
    	//public String toString(){ return ~}=>자바의 멤버변수값을 출력
    	mem.toString=function(){
    		return this.id+","+this.name+","+this.hobby+","+this.sung;
    	}
    	//객체명.호출할 함수명(저장할값~) or 객체명.호출할 함수명()
    	mem.setHobby("음악감상");
    	alert(mem.toString());
    }
</script>
</head>
<body onload="test2()">
</body>
</html>
=================================================
4.domob3.html=>객체생성방법 3번째

<title>4.domob3.html(key,value을 이용(JSON 표기법))</title>
<script>
   /*
    형식) var 객체명={
    		속성명(=멤버변수명):값1,
    		속성명2:값2,
    		,,,
    		함수명:function(매개변수명){ 내용 기술},,,
    }
   */
   //var person={} //내용이 없는 객체생성    class Person {}
    var person={
    		name:'홍길동', //key(속성명):값(value)
    		age:23,
    		eat:function(food){
    			alert(this.name+'은 오늘'+food+'을 먹을 예정입니다.')
    		}
    }
   //객체명.속성명
   document.write(person.name);
   person.eat('도시락');
     
</script>
</head>

=============================

** Ajax 프로그래밍 순서 **

Step 1 : XMLHttpRequest 객체 구하기=>client->xhr객체->server
Step 2 : 웹 서버에 요청 전송하기
Step 3 : 웹 서버의 응답을 화면에 반영하기->페이지 이동없이

=>p223 그림 이해

5.domajax2.html=>Ajax의 전체 요청 및 흐름를 이해

//1)xhr객체를 얻어오는 함수 필요
 var httpRequest=null;//xhr객체를 저장할 변수(전역변수의 성역)->p150 함수부분
 
function getXHR(){
	if(window.XMLHttpRequest){
		//httpRequest=new XMLHttpRequest();//객체를 생성
		return new XMLHttpRequest();//익명객체형태로 반환
	}
}
//2)이벤트 처리를 해주는 함수->xhr객체->서버에 요청
function load(url){
	//1.xhr객체를 얻어와야 된다.(브라우저)
	httpRequest=getXHR();//->서버에 요청해야되니깐
	alert(httpRequest)
	//2.서버요청하기전에 기본적인 설정을 한다.->콜백함수지정,Get방식,요청문서
	//2.형식) xhr객체명.onreadystatechange=콜백함수;// ()(X)->함수이름만 사용할것
	httpRequest.onreadystatechange=viewMessage;
	//3.xhr객체명.open(3개의 매개변수를 지정)
	//1.요청방식(get or post), 2.요청문서명(url) 3.처리방식(비동기방식 or 동기방식)
	//비동기 방식=>채팅,메일보내기(상대방이 결과를 보내주는것과 상관없이 다른일을 할 수 있는 방식)
	httpRequest.open("GET",url,true);//true->비동기방식
	//4.xhr객체명.send(null or 매개변수명)
	httpRequest.send(null);//서버에 요청하는 함수
}
//3)서버로부터 처리결과를 받아서 원하는 화면위치에 출력시켜주는함수(=콜백함수)
//특별한 조건이 만족하면 자동적으로 호출돼서 실행이 되는 함수->알람설정
function viewMessage(){
	//alert("viewMessage() 호출됨")
	//1.톰캣서버가 클라이언트의 요청을 다 받았는지 확인?->readyState=4(1,2,3만 일부만 요청받은경우)
    if(httpRequest.readyState==4){
    	//2.톰캣서버가 클라이언트에게 데이터를 제대로 전송을 해줬는지 체크=>status속성
    	 if(httpRequest.status==200){ //404(페이지 X),500(문법에러 O),403(접근금지)
    		 //텍스트(text)->responseText이용, xml(responseXml 이용)
    		 alert(httpRequest.responseText)
    	 }else{
    		 alert('실패:'+httpRequest.status)
    	 }
    }
}
</script>
</head>
<body>
 <h2>텍스트파일에 대한 한글처리방법</h2>
 <input type="button"  value="simple.txt"  onclick="load('simple.txt')">
 <input type="button"  value="simple2.txt"  onclick="load('simple2.txt')">
 <input type="button"  value="simple.jsp"  onclick="load('simple.jsp')">
 <input type="button"  value="simple2.jsp"  onclick="load('simple2.jsp')">
</body>
</html>
==========================================
** 중복id를 Ajax를 이용해서 구현해 보기 ** =>jQuery방법(책)

Ajax를 사용하기위해서는 html->xhtml를 주로 사용한다.
                                      xml문서 성격+html문서 성격
                                      (=>임의로 태그를 만들어서 사용가능)

             ->jsp->xhtml이 적용된 jsp를 보통 사용(불편O->jQuery)
----------------------------------------------------------------------
1.jQuery라이브러리 대신에 prototype.js 파일을 복사
   JspMember의 webContent에 복사

2.xml이 적용된 jsp파일을 선언을 해줘야 된다.
=>test.jsp생성->선언문만 복사해서 위에 선언문 붙이면 된다.
=>Register.jsp 대신에 백업->Register2.jsp 작성(원본)

  Register.jsp의 선언부분만 변경

<?xml version="1.0" encoding="UTF-8" ?>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
-----------------------------------------------------
 prototype.js를 왜 사용할까? =>$함수
 ->jQuery~.js 사용과 동일

Ajax->DOM=>태그의 정보를 얻어와야 된다.=>id속성을 이용
document.getElementById("id값")=>객체얻어온다.

==>$("id값") 필요
-------------------------------------------------------------
function $(element) {
  if (arguments.length > 1) {
    for (var i = 0, elements = [], length = arguments.length; i < length; i++)
      elements.push($(arguments[i]));
    return elements;
  }
  if (Object.isString(element))
    element = document.getElementById(element);
  return Element.extend(element);
}----------------------------------------------------------

3.Register.jsp에 자바스크립트를 실행하기위해서 파일 불러오는
구문 추가

<link href="style.css" rel="stylesheet" type="text/css">
<script language="JavaScript" src="script.js"></script>
<script language="JavaScript" src="prototype.js"></script>=>$()이용
<script language="JavaScript" src="searchWord.js"></script>=>Ajax때문 필요

***************************************************************************
<td width="57%">                                        $("mem_id")
               <input type="text" name="mem_id"  id="mem_id" size="15">
                                                                =========
		      <input type="button" value="ID중복확인" 
                         onClick="idCheck(this.form.mem_id.value)"></td>
<td id="ducheck" width="27%">아이디를 적어 주세요.</td>
     =========>$("ducheck")
********************************************************************************
4.script.js에서 idCheck()함수를 호출X ->주석처리할것.

/*
function idCheck(id){
   if(id==""){
	   alert("아이디를 먼저 입력하세요!")
	   document.regForm.mem_id.focus()//document.폼객체명.입력양식.호출할 함수
   }else{//id를 입력하고 누른경우
	   //입력받은 중복id를 jsp로 전달->매개변수로 전달
	   url="IdCheck.jsp?mem_id="+id
	   //1.호출할 문서명 2.창의 제목 3.창의 옵션(width,height,left,top)
	   window.open(url,"post","left=450,top=150,width=300,height=150")
   }
}
*/
******************************************************

- JSP의 경우 페이지 상단에 아래 구문을 넣으면 캐쉬가 적용되지 않는다.

<%
  //setHeader(키명,새로 설정할값)
 response.setHeader("Cache-Control","no-cache");//서버의 메모리에 저장X
 response.setHeader("Pragma","no-cache");
 response.setDateHeader("Expires",0);//저장유지시간 0초
%>

->body태그위에 작성

- HTML의 경우 아래 구문을 <head> 태그 사이에 넣어주면 된다.

<meta http-equiv="Cache-Control" content="no-cache"/>
<meta http-equiv="Expires" content="0"/>
<meta http-equiv="Pragma" content="no-cache"/>


출처: https://fruitdev.tistory.com/103 [과일가게 개발자]

********************************************************
5.searchWord.js 작성

6.IdCheck.jsp 작성

<?xml version="1.0" encoding="UTF-8" ?>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"
    import="hewon.*"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    
<%
   //Register.jsp(회원가입창)->searchWord.js->idCheck()=>IdCheck.jsp?mem_id='kkk'&timestamp=?
   //xhrObject가 받을 xml형태로 받을 수 있도록 text/xml형태로 변환(태그+문자열을 같이 섞어서)
   response.setContentType("text/xml;charset=utf-8");
   String outString="";//xhr객체에게 전달할 내용을 담을 변수선언(태그+문자열)
   
   String mem_id=request.getParameter("mem_id");
   System.out.println("IdCheck.jsp의 넘어온 매개변수(mem_id)=>"+mem_id);
   //MemberDAO->checkId()
   MemberDAO memMgr=new MemberDAO();
   boolean check=memMgr.checkId(mem_id);
   System.out.println("IdCheck.jsp의 check=>"+check);
%>
<body bgcolor="#FFFFCC">
<br>
<center>
  <%
     if(check){ //이미 아이디가 존재하는 경우
    	 outString="<font color='red'><b>이미 존재하는 아이디</b></font>";
     }else{//id가 없다면 ->사용이 가능하다면
    	 outString="<font color='blue'><b>사용이 가능한 아이디</b></font>";
     }
  //xhr객체에게 전달
  out.println(outString);
  System.out.println(outString);//콘솔에 출력(디버깅용)
  %>
</center>
</body>
</html>
=================================================
=>JQueryTest =>프로젝트 생성

Why jQuery ?

**  jQuery의 특징 **

일단 무료, 오픈소스=>공개(다운로드)=>자바스크립트 라이브러리
                                                                       ========
                                                    개발할때 자주 사용이 되는 함수들의
                                                    집합체

작은 용량 (min : 18KB, uncompressed : 114KB)
수많은 사용자 커뮤니티 활성화

웹 브라우저간의 차이를 자체적으로 표준화=>동일한 기능을 사용가능
플러그인의 다양성
*********************
잘 정리된 API 문서 
**********************
브라우저보다 앞선 W3C 명세 수용
사용자인터페이스 제공

=>Write less, do more (적게 작성하고, 보다 많이 한다. )
=======================================
 www.jquery.com

1.selector=>2.dom=>
   01.ready.html


=>p170 아이디선택자,클래스선택자,요소선택자(요소->태그이름)
   p174, p175->chaining method 방법
   p182,
   p190 표(선택자 종류)
   p198 배열 ** each()
   p201 map함수
   p205 속성선택자
****************************************************************************
 
