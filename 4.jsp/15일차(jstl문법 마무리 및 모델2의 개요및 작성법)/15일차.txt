15일차(jstl문법 마무리 및 모델2의 개요 및 작성법)

         액션태그2 개요, 사용법=>미니 프로젝트(모델2(MVC)) 에 적용 =>스프링(우대)
                                           모델2로 작성한 회원관리                 환경설정

 오후 3:30~팀별 진행 상황

**forEach.jsp**

<%
     java.util.HashMap mapData=new java.util.HashMap();
     mapData.put("name","홍길동");
     mapData.put("today",new java.util.Date());//날짜객체 저장
     //int []intArray={1,2,3,4,5};//배열도 객체다
%>
<c:set var="intArray"  value="<%=new int[] {1,2,3,4,5} %>" />
<c:set var="map" value="<%=mapData %>" />
<html>
<head>
<meta charset="UTF-8">
<title>forEach태그 연습</title>
</head>
<body>
<%
   int sum=0;
   for(int i=1;i<=100;i++){//i+=2
	   if(i%2==1)
	      sum+=i;//sum=sum+i;
   }
  out.println(sum);
%>
<h4>1~100까지의 홀수의 합</h4>
<%-- 
   forEach-> var="첨자의 변수명" begin="첨자변수의 시작값" end="첨자변수의 종료값"
                                             step="증가값" (1인경우에는 step값을 생략이 가능하다.)
                                             **items="${배열및 객체명}" ->html주석에서는 적용X
                                                                                                      에러유발
 --%>                                                                           
<c:set var="sum" value="0" />
<c:forEach var="i"  begin="1" end="100" step="2">
	<c:set var="sum" value="${sum+i}" />
</c:forEach>
결과:${sum}
<hr>
<%--
<c:set var="intArray"  value="<%=new int[] {1,2,3,4,5} %>" />
 --%>
 <h4>컬렉션객체 및 배열의 값을 출력(확장 for)</h4>
 <c:forEach var="i" items="${intArray}"  begin="1" end="3">
     [${i}]
 </c:forEach>
 <h4>Map객체를 이용(key,value)</h4>
 <!-- Map객체의 i값은 Map에 저장된 각각의 객체를 의미  -->
 <c:forEach var="i" items="${map}">
    ${i.key}=${i.value}
 </c:forEach>
</body>
</html>
================================================
catch.jsp ->14장.el(empty연산자), catch액션태그

<%
   /*
     try{ 에러문장  }catch(Exception 예외처리객체명(ex)){ e.getMessage(),e.toString()}
                형식) c:catch var="예외처리객체명"
   */
%>
<c:catch var="ex">
  name의 매개변수명:<%=request.getParameter("name") %>
   <%
        if(request.getParameter("name").equals("test")) { %>
        	${param.name} 은 test 입니다.
     <%   } %>
</c:catch>
<%-- <c:if test="${ex!=null}"> ex==null  (empty ex) --%>
<c:if test="${not empty ex }" > =>ex에 에러정보가 들어있다면
              ===========
      예외가 발생하였습니다.<br>
      ${ex}
</c:if>
</body>
</html>
=============================
import.jsp=>import에 관련된 액션태그=>core액션태그 끝

<%
      //String url="http://www.naver.com";
      //네이버와 다음사이트는 외부에서 접근이 금지->302 (접근금지)
      //javax.servlet.ServletException: javax.servlet.jsp.JspTagException: 302 http://www.naver.com
      //<c:import url="접속할 사이트 주소"   var="접속해서 가져올 데이터저장할 변수명"
      //escapeXml="true"(태그자체를 문자열로 인식해서 문자형태로 출력)
      //escapeXml="false" 태그자체로 인식해서 불러와서 (화면디자인상의 그 형태 그대로 )
%>
<c:set var="url"  value="http://www.chosun.com" />
<c:import url="${url}"  var="u" />
<c:out value="${url}" />가져옵니다.<p>
<c:out value="${u}" escapeXml="false" />
<hr>
<h4>내부 자원을 가져오기 </h4>
<!-- chooseTag.jsp?age2=20(get방식으로 매개변수 전달) include 액션태그와 기능이 비슷 -->
<c:set var="url"  value="chooseTag.jsp" />
<c:import url="${url}"  var="u">
	<c:param name="age2" value="20" />
</c:import>
<c:out value="${u}" escapeXml="false" />
</body>
</html>


** jstlfmt.jsp=>fmt에 관련된 액션태그 예제
============================================
 모델2->서블릿으로 구성=>ServletTest2=>구조와 흐름과정을 이해
============================================

17장. MVC 구조 (모델2) ==>스프링(MVC구조 모양으로 되어있다.)

   웹프로그래밍->초(모델1)-중(모델2)-고급(스프링)

Model(모델)=>**데이터가 저장되는 부분=>빈즈부분(DB)
                      BoardDTO,BoardDAO=>테이블갯수,필드갯수 증가

View(화면 출력)->html,css,js,jsp파일+ 최소한의 자바코드<% ~ %>
===========================================
             +
**Controller->Model---->View에 전달해서 보여줄것인가를 결정

모델2->무조건 el,jstl을 사용한다는 것을 의미하지 않는다.
            화면 편리성을 추구

컨트롤러를 배운다는 말과 같다.
=======================
모델1  요청(jsp, html)-------------------->처리하는 페이지(jsp)
          버튼,링크문자열클릭--------->list.jsp(자바코드+화면출력
                                                                              html,css)
http://localhost:8090/JspBoard/list.jsp

***************
 모델1의 장점
**************

  1.중소규모의 사이트 작성에 적합(개인 블러그)
  2.적은인원으로도 구성이 가능(4~5)

*********
 모델1의 단점 =>사이트의 규모가 커지면 단점이 발생
*********

          페이지가 많아지면 유지보수가 어려워진다.
     1. jsp=>자바소스코드+화면출력(html) ->혼영=>유지보수가 어려워진다.
*** 2. 중복된 코드가 많아진다.(페이지별로)

    클--------list.jsp-------------->서(list.jsp(자바코드+html실행)
                                                        M,V이 섞여있는 구조
                                                        C,V
   ex)회원제로 운영->20페이지다==><jsp:include 지시어를 이용)
   <%
       String mem_id=(String)session.getAttribute("idKey");
    %>
   <% if (mem_id!=null) %>
--------------------------------------------------------------------------
******
모델2=>스프링(MVC 구조)=>파견(스프링)=>금융(은행) 스프링
                                                       오라클--------스프링
******

모델2의 장점

1.대규모 사이트에 작성하는데 적합한 구조(대기업)
2.역할이 분담이 나누어져 있어서 유지보수가 쉽다.(코딩이 쉽다.)

단점

1.개개인의 실력이 향상을 요구->서블릿(자바)이 중심
2.구성원이 10인 이상을 요구
************************************

M->데이터 저장부분(=자바빈즈)

V->처리결과를 받아서 ** 출력만 담당 **
**********************************************************************
      1)요청을 받는 부분->** Controller에게 전담
      2)뷰에서 존재하는 자바코드->요청명령어 클래스에서 처리
                                             (=액션클래스(모델2)->컨트롤러 클래스(스프링))
******************************************************************************
C-->1)요청을 받아서  그 요청에 맞는 요청명령어 클래스를 선택->처리
                                                               |
                                                   빈즈메서드 호출(getArticles())
                                                          DB접속
========================================
모델1 게시판-->모델2로 게시판

ServletTest2

요청->서블릿이 요청을 받아서 그 요청에 해당하는 jsp로 페이지를 이동
-----------------------------------------------------------------------
            SimpleController------------->simpleview.jsp
                요청에 따라서  ------------->화면에 보여주는 부분이 다르다.
                  임의로 작성

** 요청명령어==>따로 파일로 만들어서 불러온다.

@WebServlet("/SimpleController")
public class SimpleController extends HttpServlet {
	
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		processRequest(request,response);
	}

	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		processRequest(request,response);
	}
    //외부에서 직접 호출X 내부에서 처리해주는 메서드 작성->private
	private void processRequest(HttpServletRequest request, HttpServletResponse response) 
			                                    throws ServletException, IOException {
		//1.요청명령어를 입력받아서 분석
		String type=request.getParameter("type");
		System.out.println("type=>"+type);
		//2.greeting=>안녕하세요, date->오늘 날짜 출력  x->invalid Type 화면에 출력
		//2.요청명령어에 따른 요청기능을 구현->요청처리 클래스객체를 생성->처리
		Object resultObject=null;//String or java.util.Date 둘다 다 저장이 가능한자료형
		//if(type.equals(null)
		if(type==null || type.equals("greeting")) {
			resultObject="안녕하세요!!!";
		}else if(type.contentEquals("date")) {
			resultObject=new java.util.Date();
		}else {  //greeting or date외의 다른 매개변수값을 전달 받으면
			resultObject="Invalid Type!!!";
		}
		//3.처리결과->simpleview.jsp로 전송=>화면에 출력
		request.setAttribute("result", resultObject);
		
		//4.forward 액션태그를 사용X->forward시켜주는 객체가 필요(RequestDispatcher객체)
		//dispatcher->데이터를 공유받아서 이동할 페이지의 정보를 가진객체
		RequestDispatcher dispatcher=request.getRequestDispatcher("/simpleview.jsp");
		//5.forward->데이터를 공유시키면서 페이지 이동
		dispatcher.forward(request, response);
	}
요청을 할때 요청명령어->처리되는 결과도 다르고->보여주는 페이지도 다르다.

http://localhost:8080/ServletTest2/SimpleController?type=greeti                       
                                                                    ?type=date

type=null
type=date
type=greeting

http://localhost:8090/ServletTest2/SimpleController?type=greeting

simpleview.jsp

<%
     //request.setAttribute("result", resultObject);
     //*** ${키명}=request.getAttribute("키명") **
%>
<h1>
처리결과:<%=request.getAttribute("result") %><br>
처리결과2:${result} 
</h1>

              <%
                   String str=request.getParameter("imsi");
                %>
               ${str}
              **  ${param.imsi}  **

      http://localhost:8090/ServletTest2/SimpleController?type=imsi
==========================================
MVC 모델 설계->컨트롤러=>스프링이 이미 만들어져 있다.
                         작성==>환경설정이 어렵다.(눈에 X)
==================================
모델1 게시판->모델2로 변환(구조만 이해)+el,jstl(모든 태그)
==================================
          ** 인터페이스->클래스는 다 다르지만 요청을 받아서 처리해주는 메서드가
                               필요(공통의 메서드가 필요)

요청명령어?->1.게시판의 글목록보기->/list.do->ListAction
                    2.글쓰기,  /writeForm.do->WriteFormAction
                    3.상세보기,
                    4.글수정,
                    5.글삭제
                    6.글검색=>6개-->처리해주는 클래스도 6개->객체->메서드 필요
                                                (=액션클래스=컨트롤러 클래스)
     주제->영화예매,사이트

->~.do(스프링)->디폴트
~.mov
~.nhn
~.XXX

=============모델2의 소스분석(2종류)=========================

1.요청명령어->컨트롤러에 요청명령어를 구분소스 계속 작성...

                       if(글목록을 요청) { if(type.equals("/list.do") =>/list.jsp(X)
			글목록에 해당클래스 생성->메서드호출
                                     new ListAction();  ->list()
		}else if(type.equals("/writePro.do") {
			글쓰기에 해당클래스 생성->메서드호출
                                     new WriteAction()->write()
		}else {
			resultObject="Invalid Type";
		}
                          ,,,,

****2.컨트롤러 하나 ->소스계속해서 X

 동일한 소스->그대로 사용=>인터페이스를 이용->요청명령어만 따로 작성
---------------------------------------------------------------------------
  JspBoard2==>JspBoard을 통해서 추가=>** 글목록보기 **
       |
        -src
           controller
                ControllerAction(4)=>시작
          action (인터페이스를 작성)
              CommandAction->requestPro(request,response)
                           상속-------->계속사용(5)
       |
        -WebContent->list.jsp~(el,jstl로 모두 변경)
                 |                     자바에서 환경설정~.properties
                         =>jsp에서 환경설정=>~.properties
                  -WEB-INF->commandPro.properties(2) ->요청명령어를 등록
                                 /가상경로/~/요청명령어=패키지명.명령어처리클래스

                              #key(command~.do)=value(package...classname)
                               /list.do=action.ListAction

                               #/notice/list.do= >공지사항

                               #/member/list.do =>회원리스트

                           web.xml(3)->컨트롤러 역할을 해주는 서블릿을 지정(p370)
                                        ->commandPro.properties 읽어들일 수 있도록
                                           환경설정을 해야 한다.
==========================================
 <!--컨트롤러역할을 하는 서블릿의 이름,요청경로를 지정  -->
  <servlet>
     <servlet-name>서블릿클래스명 동일</servlet-name>
     <servlet-class>패키지명..실행시킬 서블릿클래스명</servlet-class>
                ->서블릿이 실행이 될때 맨 처음 초기화 작업을 할때 필요로하는 태그
     <init-param>
          <param-name>propertyConfig(파라미터매개변수명)</param-name>
          <param-value>C:/webtest/4.jsp/sou2/JspBoard2/WebContent/WEB-INF/commandPro.properties</param-value>
     </init-param> ->매개변수에 따른 경로 포함해서 불러올 파일명(절대경로)
  </servlet>
  
  <!-- 어떻게 요청이 들어왔을때 처리할 것인가?  -->
  <servlet-mapping>
     <servlet-name>서블릿클래스명 동일</servlet-name>
     <url-pattern>요청명령어를 지정(*.do)</url-pattern>
  </servlet-mapping>
==========================================
 적용예)
=====
 <!--컨트롤러역할을 하는 서블릿의 이름,요청경로를 지정  -->
  <servlet>
     <servlet-name>ControllerAction</servlet-name>
     <servlet-class>controller.ControllerAction</servlet-class>
     <init-param>
          <param-name>propertyConfig</param-name>
          <param-value>C:/webtest/4.jsp/sou2/JspBoard2/WebContent/WEB-INF/commandPro.properties</param-value>
     </init-param>
  </servlet>
  
  <!-- 어떻게 요청이 들어왔을때 처리할 것인가?  -->
  <servlet-mapping>
     <servlet-name>ControllerAction</servlet-name>
     <url-pattern>*.do</url-pattern>
  </servlet-mapping>

==========================================
                          
                         |
                          -lib->standard.jar,jstl.jar복사(1)=>el,jstl문법을 사용하기위해서
-------------------------------------------------------------------------------------------
(5)

package action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

//요청명령어에 따라서 처리해주는 모든 클래스의 공통메서드(인터페이스)
public interface CommandAction {
	//이동할 페이지의 경로와 페이지명이 필요->반환=>ModelAndView(스프링)
    public String requestPro(HttpServletRequest request,
    		                              HttpServletResponse response)
                                          throws Throwable;
}
-----------------------------------------------------------------------------


