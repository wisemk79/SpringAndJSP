6일차(자바빈즈 정리 및 쿠키와 세션,XML문서 작성 및 환경설정)

HTTP의 특징

작업을 마치면 연결을 해제하는 방식으로 동작
Connection의 지속성이 없기 때문에 각각의 클라이언트를 구분할 수 없다.
->사이트 접속(유지)=>www.daum.net(새로운 사이트로 이동할때마다 자동연결)
   www.naver.com(X)

TCP 프로토콜의 구분
지속적인 연결을 유지하지 않는(stateless) 프로토콜
HTTP

지속적인 연결을 유지하는(stateful) 프로토콜
FTP(파일을 전문적으로 다운로드 사이트), Telnet

--------온라인 쇼핑몰(상품구매->결재(회원로그인)->세션에 저장(회원정보)
                                                           로그아웃할때까지 계속 정보가 저장
                                          비회원로그인->이름,주소,전번,,,,=>계속 입력

HTTP에서 상태를 유지하기 위한 방법

URL Rewriting=>Get방식->url창에 데이터값을 전송?매개변수=값&~
** Cookie,Session **

Hidden Form Field=>게시판에서 자세히(자바스크립트)

===========================================

JspWork3->프로젝트-->쿠키와 세션에 대해 정리
   WebContent(/)
        |
         -cookietest->makeCookie.jsp->useCookie.jsp
        |
         -sessiontest->준비된 예제

Windows7의 쿠키 위치

모뎀으로 인터넷으로 접속->인터넷속도가 너무 느린관계->쿠키를 이용
                                   ->접속속도를 향상시킬 목적

----------------------------------------------------------------
쿠키(Cookie)

HTTP의 상태 유지를 위한 방법

클라이언트의 상태 정보를 클라이언트의 하드 디스크에 저장한 후 필요 시 
저장된 쿠키를 읽어서 클라이언트를 식별하는 방식
쿠키란 서버가 클라이언트에 전송하여 저장하는 텍스트 조각을 의미

    컴퓨터--->사이트접속
          <---내 컴퓨터의 특정위치에 사이트정보의 내용->파일르 저장
-----------------------------------------------------------------

쿠키파일->특정 사이트에 접속->접속한 컴퓨터(서버)->자기 컴퓨터의 정보를
                담은 파일을 재전송->                            서버의 정보

==>해킹소지(개인정보 보호)->잘 사용하지 않는다.
---------------------------------------------------------------------------
윈도우 7->10->구글 검색=>10의 쿠키경로

***윈도우 7의 경우 **
C:\Users\kitcoop\AppData\Roaming\Microsoft\Windows\Cookies
              =====
              계정명

http://192.168.0.34:8090/JspWork3/cookietest/makeCookie.jsp
         localhost

*******************************************************
   makeCookie.jsp
<%
   //1.쿠키생성->이름,저장할값 지정(한글도 가능)->접속한 클라이언트에게 전송
   String cookiename="mycookie";//
   Cookie c=new Cookie(cookiename,"apple");//쿠키이름,저장할값
   //2.쿠키값을 접속한 클라이언트 컴퓨터에 전송하기전에 기본값을 설정
   c.setMaxAge(60*2);//2분쿠키 저장 유지 시간->(60*60*24*365) 1년내내 저장
   //3.쿠키의 값을 변경->setValue(변경할값)
   c.setValue("Melone");
   //4.클라이언트->addCookie(전송할 쿠키객체명)
   response.addCookie(c);
%>

***useCookie.jsp***
<h1>웹브라우저에 저장된 쿠키를 가져오는 예제</h1>
  <%
    Cookie  cookies[]=request.getCookies();//모든 쿠키를 가져오는 메서드(배열로 받아옴)
    if(cookies!=null){//검색할 쿠키의 정보가 들어있다면
    	for(int i=0;i<cookies.length;i++){
    		//mycookie찾기(쿠키값,쿠키이름)
    		if(cookies[i].getName().equals("mycookie")){ %>
    			cookieName:<%=cookies[i].getName()%><br>
    			cookieValue:<%=cookies[i].getValue()%><br>
 <% 
    		}//inner if
    	}//inner for
    }//outer if
  
  %>

http://192.168.0.35:8080/JspWork3/cookietest/makeCookie.jsp
********************************************************************
세션(Session)

클라이언트와 서버간의 상태를 유지하기 위한 방법
클라이언트가 처음 접속했을 때 세션 ID를 부여하고, 서버에 세션 ID를 저장
다시 클라이언트가 접속했을 때 부여된 세션 ID를 이용해서 클라이언트를 구분
********************************************************

**
쿠키와 세션의 공통점->둘다 클라이언트---------서버와의 연결을 일정시간동안 유지시켜주는 방법(로그인)

쿠키->파일로 저장->해킹의 소지,개인정보 유출->잘 사용X
세션->서버의 메모리에 저장->30분(default)유지->30분후 자동 종료
             HashMap(키,저장)=>Map

        인터넷 은행 홈뱅킹->10~15분정도
**
->ex) 은행->번호표 받기(세션id)=>새로 발급(번호표)=>강제로 종료

  세션의 메모리에 저장(HashMap)->키,value로 저장

         request.setAttribute(키,저장할값);=>두 페이지상의 공유
         --------------------------------------------
          page < request < session < application(실제로는 사용X)
         --------------------------------------------
         session.setAttribute(키,저장할값(계정id));
          <->session.getAttribute(키명)
              invalidate()=>로그아웃
   
**sessionTest1.jsp**
<%
  //회원가입을 먼저 한 상태->인증성공
  String id=request.getParameter("id");
  String passwd=request.getParameter("passwd");
  System.out.println("id=>"+id+",passwd=>"+passwd);
  //오라클,MySQL->member->sql->true or false=>다음주부터 확인
  session.setAttribute("idKey",id);//default->30분<->session.getAttribute("키명")
  session.setMaxInactiveInterval(60);//1분(세션 유지시간을 설정)
 %>

**sessionTest2.jsp**

 서버쪽에 접속한 클라이언트를 구분하는 고유의 번호=>세션 id(은행의 번호표)

세션 id:7BC364E00834649676A22E8554554B80=>번호표1

세션 id:02494E66486E39889CB6E1AC0FDD2A65=>번호표2

<%
      request.setCharacterEncoding("utf-8");//한글처리
      String sports=request.getParameter("sports");
      String season=request.getParameter("season");
      //개인정보 id=>request.getParameter()(X)
      String id=(String)session.getAttribute("idKey");//계정 id
      String sessionid=session.getId();//브라우저 구분->세션id
      int interval=session.getMaxInactiveInterval();//유지시간
      if(id!=null){ //현재 계정으로 로그인중이라면
%>
      <b><%=id %></b>님이 좋아하시는 스포츠와 계절은 <p>
      <b><%=sports %></b>와 <b><%=season %></b>입니다.<p>
       세션 id:<%=sessionid %><p>
      세션유지시간:<%=interval %>초 <p>
      <%
             session.invalidate();//연결해제(로그아웃)->세션객체 정보를 자동으로 삭제
      }else{//id=null(즉 로그인 한적이 없거나 연결시간이 초과된 경우)
    	  out.println("세션의 연결시간이 초과되었습니다.다시 로그인 해주세요");
      }
      %>
</body>

===================================================
 xml문서=>웹프로그래밍의 환경설정때문에 사용=>스프링
           =>서블릿의 환경설정(xml문서)

 HTML5->HTML4=>태그문법=>정해진 태그만 사용

 Extensible Markup Language->사용자 정의 태그를 사용할 수 있다.->의미를 전달
  확장할 수있는~                    (=새로 태그를 만들 수 가 있다.)

                                             태그의 작성방법시 주의할점
                                            (=Element)

 html5----->정해진 태그만 사용 <h1>=>화면디자인용
==============================

1.확장자->.xml (환경설정)->화면디자인(fx)
              화면디자인->안드로이드 화면디자인시(xml 구조)

2.맨 처음 선언부가 먼저 나온다.

html->태그 정해져 있기때문에 <h1>(모양)

<?xml version="1.0" encoding="utf-8"?> =>한글도 가능(태그)
           속성명         속성명

<?xml version="1.0"~>  encoding->이 생략->영문태그만 사용이 가능
==============================================
  xml->extensible markup language
     ->사용자정의 태그를 사용이 가능 (기능)->성격
     ->태그를 임의로 작성이 가능하지만 현실적-->** 전세계 표준 (환경설정) **

  html->정해진 태그만 사용->암기(화면 출력)-><h1>홍길동</h1>
  xml->임의로 작성(의미 전달)-><name>홍길동</name>

 3.루트태그는 한번만 사용->루트태그는 반드시 존재해야 한다.=>xml문서를 작성하기위해서는
                                                                                 최소한의 태그하나는 존재

 ** 4.태그의 이름을 부여=>알파벳,숫자,특수기호를 조합=>자바의 식별자처럼

  <name> </name> or <이름></이름>

  <h1>홍길동</h1>      <name>홍길동</name>
      글자크게(제목)           이름은 홍길동---------->의미가 전달
 
 5.첫글자는 숫자가 오면 안된다.-->자바의 식별자와 같다(변수,클래스,메서드~)

   <1a> </1a> X    <a1>~</a1>  =>태그이름=>잘 의미가 전달될 수있는 단어
                                               <aaa>홍길동</aaa>=>X
 
 6.태그중간에 _ ,-,. 이 올 수 있다.(대부분 -> -)

  <servlet-name>  <servlet.name> <servlet_name>
          (o)                        (x)                  (x)

 7.태그는 대,소문자를 구분해서 사용
  <NAME> ,<Name>,<name>

 8.시작태그가 있으면 종료태그가 반드시 존재
  <name>홍길동</name> =>태그명은 의미가 있는 단어사용

  <a1>홍길동</a1>=>  <이름>홍길동</이름>

 9.태그내부에 또 다른 태그를 사용이 가능(겹쳐서)=>중첩이 가능하다.

      <person>
        <!-- name  -->==>X  =>태그내부에는 주석을 달지 말것=>환경설정이 안될가능성이
 ex)  <name>홍길동</name>                                               많다.
        <age>23</age>
     </person>

 10.태그를 사용->속성을 사용=>속성값은 반드시 " "  ->html->속성->"" 생략 가능

 ex) <font size=3>홍길동</font>
     => <font size="3">홍길동</font>
  xml구조=>트리구조로 구성->한개라도 틀리면 전체X
           탬색기

 **11.xml주석-><!-- 한글을 쓰면 안되는 경우  -->
       encoding속성이 영문으로 되어있으면 주석도 한글X

 xml 주석-><!--   --> html주석,jsp주석

***  중첩된 태그내부에서는 절대로 주석달지 말것. (환경설정 오류때문에) ****
-------------------------------------------------
**
xml 문법 정리 참조할것.
======================================
<?xml version="1.0" encoding="UTF-8"?>
<개인정보들>
  <개인 id="1">
     <이름>홍길동</이름>
     <나이>23</나이>
     <성별>남</성별>
     <주소>서울시 강남구 대현빌딩 3층</주소>
     <번호>02-123-0987</번호>
  </개인>
  
  <개인 id="2">
     <이름>테스트</이름>
     <나이>35</나이>
     <성별>여</성별>
     <주소>경기도 광명시</주소>
     <번호>053-444-0987</번호>
  </개인>
</개인정보들>
===========================================

**
xml의 태그는 내마음대로 작성이 가능하지만=>java=>xml (표준화)
->DTD선언문 표시->web.xml

****************************************************************
예시

<web-app>
<display-name> 프로젝트명 </display-name> ⓐ

<filter> ⓑ <filter> 전체
<filter-name> 필터 닉 네임 </filter-name>  <filter-name>ⓒ
<filter-class> 필터 클래스 풀 네임(패키지 명까지) </filter-name>  ⓓ 
<init-param> ⓔ <init-param> 전체
<param-name> 매개변수 명 </param-name>
<param-value> 값 </param-value>
</init-param>
</filter> 
<filter-mapping>  ⓕ <filter-mapping> 전체
<filter-name> 필터 닉 네임 </filter-name> ⓗ
<url-pattern> 필터 클래스가 실행될 위치 </url-pattern> ⓘ
</filter-mapping>

<serlvet> ⓙ <serlvet> 전체
<servlet-name> 서블릿 닉 네임 </servlet-name> ⓚ
<serlvet-class> 서블릿 클래스 풀네임(패키지 명까지) </servlet-class> ⓜ </servlet-class> 전체
<init-param>
<param-name> 매개변수명 </param-name>
<param-value> 값 </param-value>
</init-param>
<load-on-startup> 실행 순서 값(0값은 서버임의실행) </load-on-startup> ⓝ
</servlet>
<servlet-mapping> ⓞ <servlet-mapping> 전체
<servlet-name> 서블릿 닉 네임 </servlet-name>
<url-pattern> url 패턴 </url-pattern> ⓟ 
</servlet-mapping>

<welcome-file-list> ⓠ <welcome-file-list> 전체
<welcome-file> 기본 파일 </welcome-file>
</welcom-file-list>
</wep-app>


출처: https://devbox.tistory.com/entry/Servlet-서블릿에서-webxml-파일의-역할 
[장인개발자를 꿈꾸는 :: 기록하는 공간]


****************************************************************

<!-- 메인페이지를 지정할때 사용하는 환경설정태그명 -->
  <welcome-file-list>
    <welcome-file>index.jsp(메인페이지명)</welcome-file>
  </welcome-file-list>

  =>없으면 404에러메세지 출력한다.
=========================================

<!-- 서블릿의 정보를 기록(p419) -->
형식)
  <!--실행시킬 서블릿의 이름과 별칭을 부여  -->
  <servlet>
     <servlet-name>실행시킬 서블릿의 별칭부여</servlet-name>
     <servlet-class>패키지명...실행시킬 서블릿클래스 full이름</servlet-class>
  </servlet>
  
  <!-- 웹상에서 어떻게 하면 서블릿을 실행시킬 수있는지에 대한 정보  -->
  <servlet-mapping>
       <servlet-name>실행시킬 서블릿의 별칭부여</servlet-name>
       <url-pattern>웹상에서 실행되는 서블릿의 url경로 지정</url-pattern>
  </servlet-mapping>

<!-- 메인페이지 지정 -->
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
*************************************************************
<!-- 서블릿의 환경설정(모델2,스프링) servlet(실행시킬 서블릿의 정보)  -->
  <servlet>
       <servlet-name>hello</servlet-name>
       <servlet-class>HelloTest</servlet-class>
  </servlet>
  
  <!-- 어떻게 서블릿을 요청했을때 실행시킬것인지를 지정해주는 태그정보 -->
  <servlet-mapping>
     <servlet-name>hello</servlet-name>
     <url-pattern>/test/imsi/HelloTest</url-pattern>
  </servlet-mapping>
*************************************************************
<!--1.서블릿의 정보를 저장  -->
  <servlet>
    <servlet-name>Repeat</servlet-name>
    <servlet-class>RepeatServlet2</servlet-class>
  </servlet>
  
  <!--2.웹상에서의 접근방법에 대한 태그존재  -->
  <servlet-mapping>
     <servlet-name>Repeat</servlet-name>
     <url-pattern>/RepeatServlet2</url-pattern>
  </servlet-mapping>
=======================================
http://localhost:8080/ServletTest/test/imsi/HelloTest
                                          =============
                                            실행시킬 서블릿의 요청경로를 임의로 지정이 가능
=======================================
  6장.에러코드별 처리

  errorPage,isErrorPage 이것을 더 이상사용X=>xml로 환경설정로 변경
==============================================
<error-page>태그정보를 이용해서 에러페이지를 작성

1.web.xml에서 에러가 발생이 되었을때 어떠한 페이지로 이동하라고 환경설정이 가능

<!-- 에러페이지 작성법 -->
  <error-page>
     <error-code>에러가 발생시 처리해줄 코드번호(404 or 500)</error-code>
     <location>상대경로 포함해서 처리해줄 에러페이지명</location>
  </error-page>
  
  <error-page>
     <error-code>문법에러가 발생시 코드번호(500)</error-code>
     <location>상대경로 포함해서 처리해줄 에러페이지명</location>
  </error-page>
===================================
<!-- 에러페이지 작성법 -->
  <error-page>
     <error-code>404</error-code>
     <location>/error/404code.jsp</location>
  </error-page>
  
  <error-page>
     <error-code>500</error-code>
     <location>/error/500code.jsp</location>
  </error-page>

2.경로상의 에러가 발생시 처리해줄 jsp파일 작성
   error
      |
       -404code.jsp save as 500code.jsp 작성

<meta charset="UTF-8">
<title>404에러가 발생이 된경우</title>
</head>
<body>
<%
    response.setStatus(HttpServletResponse.SC_OK);
    //개발자가 지정한 에러페이지를 설정해서 보여준다는 옵션
%>

<h1><font color="red">
요청하신 문서를 못찾았습니다. 요청하신 문서와 경로를
다시한번 확인해주세요!!!
</font></h1>
</body>
------------------------------------------------------------
 save as 500code.jsp를 작성

<title>500에러가 발생이 된경우</title>
</head>
<body>
<%
    response.setStatus(HttpServletResponse.SC_OK);
    //개발자가 지정한 에러페이지를 설정해서 보여준다는 옵션
%>

<h1><font color="red">
 어떤수를 0으로 나누면 안됩니다. 다시한번
 자세히 확인해주세요!!
</font></h1>
</body>

3.실제로 에러가 있는 jsp를 실행->테스트해본다.

  zero.jsp

<title>에러발생</title>
</head>
<body>
  <%=9/0 %>
</body>
==================================
=================================
