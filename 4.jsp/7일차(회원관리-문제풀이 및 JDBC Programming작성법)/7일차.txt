**** 회원관리 ****

*** 문제 풀이=>과제 풀이 ***
 
2/28일 휴강(이번주 금요일)
2/27일 재시험(목요일)->3/4일 재재시험
이번주 팀을 구성(이번주 수요일->쪽지->팀원확인)=>25명->5명(전공자 2명-비전공자 3명)
-------------------------------------------------------------------------------------------------
  **cal.jsp **

<center>
  <h3>간단한 계산기</h3>
  <form name="form1" method="post" action="calResult.jsp">
    <input type="text" name="num1" width="200" size="5">
      <select name="operator">
        <option selected>+</option>
        <option>-</option>
        <option>*</option>
        <option>/</option>
      </select>
    <input type="text" name="num2" width="200" size="5"><p>
    <input type="submit" value="계산">
    <input type="reset" value="다시입력">
  </form>
</center>
============================================
 calc.CalBean.java

package calc;
//자바빈즈->웹상에 값을 입력,출력하거나, 메서드를 호출할때 필요로하는 클래스(DTO)
//public class로 줘야 외부에서 접근이 가능->그 클래스의 객체를 생성->메서드호출, 멤버변수에 값저장

public class CalcBean {

	private int num1,num2;//"5","3"->5,3 <%=num1+num3%>
	private String operator="";//연산자를 저장할 변수
	//추가
	private int result;//연산값을 저장할 변수
	
	//+,-,*,/->계산(calculate)->매개변수 O ,반환값 X
	
	public int getNum1() {
		return num1;
	}

	public void setNum1(int num1) { //액션태그를 사용->웹상에서 많은 데이터를 입력
		this.num1 = num1;
		System.out.println("setNum1()호출됨!");
	}


	public int getNum2() {
		return num2;
	}


	public void setNum2(int num2) {
		this.num2 = num2;
		System.out.println("setNum2()호출됨!");
	}


	public String getOperator() {
		return operator;
	}


	public void setOperator(String operator) {
		this.operator = operator;
		System.out.println("setOperator()호출됨!");
	}


	public int getResult() {
		return result;
	}


	public void calculate() { //멤버변수에 저장된 값을 그대로 불러다 사용이 가능->매개변수X
		//+
		if (operator.contentEquals("+")) {
			result=num1+num2;
		}
		//-
		if (operator.contentEquals("-")) {
			result=num1-num2;
		}
		
		//*
		if (operator.contentEquals("*")) {
			result=num1*num2;
		}
		// /
		if (operator.contentEquals("/")) {
			result=num1/num2;
		}
	}
}
=======================================
calResult.jsp

<title>요청을 받아서 처리해주는 페이지</title>
</head>
<body>

 <%
    //입력받아서 계산->출력(방법1)->자바빈즈를 이용
    /* 방법1
    CalcBean ca=new CalcBean();//멤버변수에 저장,계산calculate()
    //입력받은 갯수만큼->Setter Method로 필드별로 구분해서 호출
    //int su=Integer.parseInt(request.getParameter("num1"));
    ca.setNum1(Integer.parseInt(request.getParameter("num1")));//"5"->5
    ca.setOperator(request.getParameter("operator"));
    ca.setNum2(Integer.parseInt(request.getParameter("num2")));//"3"->3
    ca.calculate();//result에 저장
    */
 %>
 <!-- 방법2 -->
 <jsp:useBean id="ca"  class="calc.CalcBean" scope="page" />
 <jsp:setProperty  name="ca" property="*" />
 <%  ca.calculate();  %>
 
 계산결과:<%=ca.getResult() %><br>
 계산결과2:<jsp:getProperty name="ca" property="result" />
</body>
</html>
===============================================
cal.jsp를 save as cal2.jsp=>cal.jsp+calResult.jsp를 다 포함시켜주는 예제
===============================================
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<jsp:useBean id="ca"  class="calc.CalcBean" scope="page" />
<jsp:setProperty  name="ca" property="*" />
<%  ca.calculate();  %>
 
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>요청을 하는 페이지(빈즈이용)</title>
</head>
<body>
<center>
  <h3>간단한 계산기(요청,응답을 하나의 페이지에서 작성(Ajax))</h3>
  1.<!-- <form name="form1" method="post" action="cal2.jsp"> -->
  2. <form name="form1" method="post">       ===========self(요청, 및 처리 자기가
                                                                                      처리)
         action="데이터전송할 페이지"=>없다는 얘기=>자기에게 전송을 한다는 의미
--------------------------------------------------------------------------------------
    <input type="text" name="num1" width="200" size="5">
      <select name="operator">
        <option selected>+</option>
        <option>-</option>
        <option>*</option>
        <option>/</option>
      </select>
    <input type="text" name="num2" width="200" size="5"><p>
==============================
    <input type="submit" value="계산">=>input type="submit" =>자동으로 이동시키기
                                                                                        위해서 필요
=============================
   <input type="button" value="계산" onclick="처리할 함수명()" />(X)
 
    <input type="reset" value="다시입력">
  </form>
  <hr>
  계산결과:<%=ca.getResult() %><br>
  계산결과2:<jsp:getProperty name="ca" property="result" />
</center>
</body>
</html>
========================================
  회원관리=>회원로그인,가입,수정,탈퇴,조회,,,,

  9장.데이터베이스와 JSP 연도=>p304~321=>오라클 1~2일차 복습(읽어보기)
** p322~337페이지까지 정리 **
============================================

  JspMember=>프로젝트 생성
       |
        -WebContent
              |
               -db=>dbselect.jsp

** JDBC 전체 과정 **

JDBC(Java Database Connectivity) 개요 및 특성

1.자바 App에서 표준화된 데이터베이스에 연동하는 방법을 제공해주는 기술
2.각 데이터베이스 접속에 대한 상세한 정보를 알 필요 없음=>인터페이스로 구성

  =>import java.sql패키지=>클래스로 제공=>DB연동하는 메서드 다르다
                                   ** 인터페이스로 구성(공통의 메서드만 사용) **

-------------------------------------------------------------------------------
3.JDBC Driver만 설정=>모든 DB 다 접속이 가능
--------------------------------------------------------------------------------
 DB설정->jdbc driver를 이클립스에 불러다 사용

***********************************************************************************************
          C:\jdk1.8
                  jre
                    lib
                      ext =>접속하고자하는 jdbc driver를 복사=>전역의 의미
                             추가적인 환경설정을 할 필요가 없다
   =>다른 경로에 jdbc driver를 저장->추가적인 환경설정이 필요=>classpath환경변수
                                                                                       경로를 지정해야한다.
   =>** 이클립스에서 따로 java build path항목의 lib에 불러오는 작업**
************************************************************************************************
  웹상에서의 DB연동하는 방법=>드라이버를 불러오는 방법

  1.ojdbc6.jar (오라클의 경우)=>C:\Tomcat 8.5\lib에 복사해 놓기
                     ->이클립스를 가동시키면 자동 C:\Tomcat 8.5\lib에 있는 파일들을
                        자동으로 불러오기(전역의 의미)->모든 Application에서 다 불러올
                                                                    수 있다.
**************************************************************************************
                        ***servlet-api.jar =>jsp파일을 서블릿으로 변환시킬때 jsp에서
                                                  필요로하는 서블릿클래스와 인터페이스가
                                                  저장된 라이브러리 파일
**************************************************************************************
  2. 필요로하는 프로젝트에서 접속할 driver를 등록

        웹어플리케이션(JspMember)
                  |
                  src-
                   -WebContent
                          |
                           -WEB-INF->web.xml
                                 |
                                 ********************
                                 *-lib=>ojdbc6.jar에 복사를 해놓으시면 DB연동이 가능하다.
                                 **********************

  ** JDBC Programming순서 절차 **


 1.Class.forName(“oracle.jdbc.driver.OracleDriver”);  //메모리에 올리는 작업
                        ------------------ -------------db에 관련된 클래스->메모리에 올림
                                                                      객체생성
                        com.mysql.jdbc.Driver (mysql)
                        ---------------- ------클래스명
                         패키지

 2.Connection conn = DriverManger.getConnection(JDBC_url,”아이디”,”비밀번호”);
                                                                    DB서버위치,접속계정,암호
   JDBC_URL 구성 = jdbc:oracle:thin:@IP주소:포트:SID
   =>로그인 과정                                     1521:orcl

                          jdbc:mysql://localhost:3306/접속할 DB명(jsptest)
                                           ip주소
-----------------------------------------------------------------------------------------------
 3. ** SQL구문을 작성하기위해서 필요로하는 객체 2종류 **

Statement 생성 및 쿼리 실행
(문장객체)

select ename,sal from emp where deptno=30;
//30번 부서 대신에 20번부서에 대한 SQL작성
=>select ename,sal from emp where deptno=20;
                                                  =======
=>전의 SQL구문을 지우고 새로 작성=>실행

PreparedStatement 생성 및 쿼리 실행=>실행 처리 속도가 빠르다.
(=준비된 문장객체)

 =>** 필요로하는 부분만 변경해서 작성** ->입력받는 부분은 ?로 표시
===========================================

select ename,sal from emp where deptno=30;
//30번 부서 대신에 20번부서에 대한 SQL작성
select ename,sal from emp where deptno=30; //필요로하는 부분만 변경
                                                                ?

SQL> select ename,sal from emp where deptno=30;

ENAME             SAL
---------- ----------
ALLEN            1600
WARD             1250
MARTIN           1250
BLAKE            2850
TURNER           1500
JAMES             950

6 개의 행이 선택되었습니다.

 deptno의 값을 입력하십시오: 10

구   1: select ename,sal from emp where deptno=&deptno=>치환매개변수
                                                                 입력받는부분=>?

신   1: select ename,sal from emp where deptno=10

-------------------------- 테이블 자체(ResultSet rs)=>select구문을 사용해야 표시된다.
ENAME             SAL                                         반환값 존재
---------- ---------------
CLARK            2450==>rs.first()=>맨처음 레코드로 이동
KING             5000  ==>rs.next()=>다음 레코드로 이동
                            ==>rs.previous()=>이전 레코드로 이동
MILLER           1300==>rs.last()=>맨 마지막 레코드로 이동
--------------------------

4.SQL문장을 실행하기위해서 사용되는 메서드

   create table문, alter table,drop table문=>executeUpdate()사용

 ** excuteQuery() 메소드  : SELECT문일 때,
                                 리턴 값은 ResultSet클래스의 객체로 반환받음
                               =>테이블의 구조에 영향을 미치지 않은 SQL구문에
                                   사용

 ** excuteUpdate() 메소드 : INSERT, UPDATE, DELETE문의내용 변경 
                                 리턴 값은 처리된 데이터 수를 정수형으로 반환
                          =>** 테이블의 구조에 영향을 미치는 SQL구문에 사용**

  1=>실행성공을 의미 ,실행된 SQL구문의 insert(갯수),update(갯수),delete(갯수)
  0=>실행실패를 의미->SQL구문의 오타
===============================================
 5.  문자,숫자                                       name=>varchar2, varchar(MySQL)
  =>rs.getString("불러올 컬럼명")        rs.getString("name")
             ====
      rs.getInt("불러올 컬럼명")---------->rs.getInt("age")
                                                     rs.getString("age")(X)

      rs.getDouble, rs.getFloat~
      rs.get자료형("필드명") or rs.get자료형("인덱스번호")(비추) 
                   1    2                           sql의 구문에 따라서 변동이 있을수
 ex) select ename,age from emp;           있기때문에

       변수명=rs.getInt("age") or rs.getInt(2)

     select age,ename from emp;=>rs.getInt(1)

     select * from emp;   =>인덱스번호=>emp테이블을 만들어진 순서대로
                                                     필드가 정해진다.
  ex) create table emp(empno,~
                              ename~  ==>만들어진 순서대로 불러온다.
                               age ~===========>rs.getInt(3)

  6.DB연결 해제구문=>생성된 객체의 역순으로 메모리를 해제시킨다.

rs.close();			/*-- ResultSet 커서 --*/
pstmt.close(); // stmt.close();	/*-- SQL 문 --*/
Conn.close();
===============================================

dbselect.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.sql.*" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>JDBC 프로그래밍 연결및 DB연동확인예제</title>
</head>
<body>
<%
//TODO Auto-generated method stub
		Connection con=null;
     //형식) jdbc:oracle:thin:@상대방의 접속ip주소:접속포트번호:SID
     String url="jdbc:oracle:thin:@localhost:1521:orcl";//접속 오라클의 위치
     
     Statement stmt=null;//create table
     PreparedStatement pstmt=null;//insert into
     Statement stmt2=null;//select ~
     
     ResultSet rs=null;//select 검색결과를 표형태로 
     String sql="";//sql구문을 저장
     
     try {
     	//1.접속할 드라이버를 메모리에 올리기(상위패키지.하위패키지...클래스명)
   	  Class.forName("oracle.jdbc.driver.OracleDriver");
   	  //2.접속하기위해서 인증 ->1.접속경로 2.계정명 3.암호
   	  con=DriverManager.getConnection(url,"scott","tiger");
   	  System.out.println("접속 con=>"+con);
   	  //3.테이블을 생성->create table->stmt
   	  stmt=con.createStatement();
   	  sql="create table MyTest2(name varchar2(20),age number)";
   	  int create=stmt.executeUpdate(sql);
   	  System.out.println("테이블 성공유무(create)=>"+create);//0
   	  
   	  //4.insert 
   	  //sql="insert into Mytest values(?,?)";
   	  pstmt=con.prepareStatement("insert into Mytest2 values(?,?)");
   	  //형식)pstmt객체명.setString(or setInt,setDouble,,,(?의 순서,입력할값)
   	  pstmt.setString(1,"Lee"); //pstmt.setString(1,tf1.getText())
   	  pstmt.setInt(2, 23);
   	  int insert=pstmt.executeUpdate();
   	  System.out.println("데이터가 입력성공유무(insert)="+insert);//1
   	  //5.select->필드별로 출력해서 결과 보기
   	  stmt2=con.createStatement();
   	  String sql2="select * from MyTest2";//* ->테이블의 만들어진 필드순서대로
   	  rs=stmt2.executeQuery(sql2);
   %>
   <table border="1" cellspacing="0" cellpadding="0">
     <tr bgcolor="pink">
        <th>name</th>
        <th>age</th>
     </tr>
   <%
   	  while(rs.next()) {//이동시킬 레코드가 계속 존재하는한
     %>
       <tr>
   		    <td><%=rs.getString("name") %></td>
   		    <td><%=rs.getInt(2)%></td>
   		</tr>
   <%		
   	  }
   	   //rs.close();//con->stmt->pstmt->stmt2->rs
   	   stmt2.close();
   	   pstmt.close();
   	   stmt.close();
   	   con.close();
   	  //6.메모리 해제->에러유발과 상관없이 반드시 처리하고 프로그램 종료
     }catch(Exception e) { //SQLException(SQL구문실행오류)
     	System.out.println("DB접속에 실패했거나 SQL구문이 잘못됨=>"+e);
     }
%>
</table>
</body>
</html>
==================================================
   int insert=pstmt.executeUpdate();
   System.out.println("insert=>"+insert);

***** 모델1 방식의 프로그램 작성법 *****

장점

1. 적은규모(중소규모)의 사이트에 적합(4~5)=>모델2 이상을 요구
2. 적은 인원으로 웹사이트 개발에 적합=>개인 프로젝트

단점

1.대규모의 (대기업규모) 사이트에 적합
  하지 않는다.(10명 이상)
2.페이지가 많아지면 유지보수가 어렵다
===============================

모델2, ** 스프링(백엔드) **



sql>commit;
sql>select count(*) from zipcode;
===========================