3일차(지시어의 개요및 작성법,서블릿의 개요,작성법)










** 자바스크립트 함수 호출하는 방법 **

*************************************************************************************
1)링크만들기 클릭
<a href="JavaScript:goBox()">표만들기</a>
           =JavaScript:호출할 함수명()=>코드가 길어지는 경우->함수작성->호출
             JavaScript:자바스크립트 코드;~

          수동으로 코딩 =>document.BoxForm.submit()

2)버튼클릭->회원가입,로그인,,,
<input type="button" value="표만들기" onclick="goBox()">
                                                           onclick="호출할 함수명(~)"

   =>수동으로 코딩 =>document.BoxForm.submit()

<input type="submit" value="표만들기" onclick="goBox()">
                                                           onclick="호출할 함수명(~)"

       자동으로 전송되기때문에 코딩하지 않아도 된다.
       document.BoxForm.submit()(X)  action="이동할 페이지명"
************************************************************************************

 AB+AC+AD =>A(B+C+D)

  with(공통부분) {
          나머지 부분
  }

if(tr_cnt.options.selectedIndex==1) || if(tr_cnt.options.selectedIndex==2) || ~9

box.html

function goBox(){
	  //기본형식->document.폼객체명.입력양식객체명.속성명=값(저장)
	  /* document.BoxForm.tr_cnt.options.selectedIndex=1~9
	      document.BoxForm.td_cnt.options.selectedIndex=1~9
	  */
	  with(document.BoxForm){
		  if(tr_cnt.options.selectedIndex==0){
			  alert("만들고자하는 표의 가로를 먼저 선택하세요")
			  return;//return false;
		  }else if(td_cnt.options.selectedIndex==0){
			  alert("만들고자하는 표의 세로를 먼저 선택하세요")
			  return;//return false;
		  }else if((tr_cnt.options.selectedIndex!=0) && 
				       (td_cnt.options.selectedIndex!=0)){
			  //형식)document.폼객체명.submit()->action="box_proc.jsp"로 이동하라
			  //<input type="submit">인 경우에는 자동으로 전송
			    submit();
		  }
	  }
   }//goBox()

==box_proc.jsp==
<%
     //request.setCharacterEncoding("utf-8");//한글데이터
     //형식) String 변수명=request.getParameter("매개변수명")//행=>"2"->2
     String tr_cnt=request.getParameter("tr_cnt");//행
     String td_cnt=request.getParameter("td_cnt");//열
     System.out.println("tr_cnt=>"+tr_cnt+",td_cnt=>"+td_cnt);//디버깅

%>
<table border="1">
   <% for(int i=0;i<Integer.parseInt(tr_cnt);i++){ %>
       <tr>
           <% for(int j=0;j<Integer.parseInt(td_cnt);j++) { %>
               <td width="50">&nbsp;</td>
           <% } %>
       </tr>
  <% } %>
</table>
<!-- <a href="box.html">다시 입력하기</a>
      history.back() or history.go(-1) 전의 페이지로 이동하라
 -->
<a href="JavaScript:history.back()">다시 입력하기</a>

=================================
 ** JSP 구성요소 4가지 **

1.스크립트릿
2.표현식
3.선언문
4.주석 또는 지시어
====================
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

*** 지시어->jsp파일의 선언문=>톰캣서버에게 요청을 하는 선언문
             속성으로 요청

  page지시어 속성
language="java" ->jsp가 자바로 작성(생략)

------------------------------------------------
                     video/mp4  ->mine type->서버에 요청할 필요한 문서의 종류
***                img/jpg
contentType="text/html; charset=UTF-8"
  ==>텍스트형태의 html문서로 만들어서 보내주되 한글이 결과에 포함이 되어있다면
          한글이 깨지지 않은상태로 보내주세요

pageEncoding="UTF-8"=>한글처리해주세요

*** import=>외부에서 패키지를 불러올때 사용

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" 
    import="java.util.Date" %>
<%@ page import="java.io.*,java.util.*" %> =>속성값을 여러개 나열->,,,
<%@ page import="java.sql.*" %> =>세로로 여러개의 import속성을 쓸 수있다.
---------------------------------------------------------------------------------------
 ->buffer,autoFlush=>입출력과 관련->액션태그와 연관
------------------------------------------------------------------
errorPage ,isErrorPage->에러페이지를 작성할때 사용
->현재 8.x에서는 사용X --->Tomcat 4.x까지 사용했던 속성
--------------------------

isThreadSafe=false=>동시 접속X=>관리자만 접속해서 홈페이지 수정할때
                                              외부에서 접속불가

isThreadSafe=true(default)->홈페이지가 동시 접속이 가능하게 할때 사용하는 방법

<%@page info="현재 페이지 연습중입니다">=>주석대용

<!-- 현재 페이지 연습중입니다 -->

contentType="text/html"  =>default(영어)->?????

형식)<%@ 지시어종류  ->3가지 요청할 문장(톰캣서버한테)
                 ======

        <%@ page ->page지시어
        <%@ include ->include지시어>  =>모델1(웹사이트 기본)
                                                          개인블러그,중소규모의 사이트
-----------------------------------------------------------------
        <%@ taglib ->taglib지시어  =>모델2->대규모 사이트->스프링
-------------------------------------------------------------------
 ServletTest ->프로젝트단위
 
        JSP와 Servlet 관계

   요청을 jsp하면-->내부적으로 jsp->~.java로 변환(서블릿)->문법X->class->메모리
                      ->서블릿객체를 생성->요청에 따른 처리를 해준다.
*******************************************************************************************
서블릿 개요->접속할때 서버에서 컴파일->실행
(Servlet)        실행결과+html문서형태로 만들어서
                  전송해주는 프로그램
                   (웹상에서 요청이 들어왔을때 실행이 되는 자바프로그램)
****************************************************************************
JSP 파일

웹프로그램밍->1.서블릿--->2.JSP

단점=>70~80% 자바코드+html,css(15~20%)
      =>접근이 어렵다.
장점=>jsp보다 속도가 빠르다.(내부적으로 변환시간X,jsp 찾는 시간X)

 ------------->2.JSP(모델1)
 70~80(html,css,js)+최소한의 자바코드를 작성
                              (15~20%)
 단점=>자바코드+디자인 코드(혼합)=>에러어려움
 
 ------------------>프로젝트(모델2)=>서블릿

   서블릿+JSP를 혼합해서 사용
===========================

/*
 *1. Servlet->Server Side Applet(서버상에서 실행되는 웹프로그램)
 *                                           ->브라우저에서 실행결과를 볼 수 있다.
 * 자바스크립트 프로그램->계산기(자기 컴퓨터에서 실행->자기 브라우저)   
 *              Client Side            
 *              
 * 2.서블릿을 만들 수 있는 조건
 * 
 *  1)import javax.servlet.*;//서블릿의 클래스
 *     import javax.servlet.http.*;   //웹상에서의 접속에 관련된 정보 
 *     =>c:\tomcat8.5\lib->servlet-api.jar파일에 저장     
 *   2) 반드시 public class로 작성해야 한다.-> 누구나 접속이 가능하게 만들기 위해
 *   3) 반드시 HttpServlet클래스를 상속받아야 된다. ->
 *      get방식으로 요청->doGet() 자동 호출
 *      post방식으로 요청->,doPost() 자동 호출                          
 */

import java.io.IOException;//입출력
import java.io.PrintWriter;

import javax.servlet.Servlet;
import javax.servlet.ServletConfig;//서블릿의 초기환경설정할때 필요
import javax.servlet.ServletException;//서블릿의 오류발생시 처리
import javax.servlet.annotation.WebServlet;//웹상에서 어떻게 접근->정보
import javax.servlet.http.HttpServlet;//상속을 받을 부모클래스
import javax.servlet.http.HttpServletRequest;//요청을 받아서 처리 인터페이스
import javax.servlet.http.HttpServletResponse;//응답을 받아서 처리 인터페이스

/**
 * Servlet implementation class HelloTest
 */
@WebServlet("/HelloTest")
public class HelloTest extends HttpServlet {
	
	/**
	 * 서블릿을 처음 실행시킬때 자동으로 호출되는 메서드(=>생성자와 같은 역할)
	 */
	public void init(ServletConfig config) throws ServletException {
		// TODO Auto-generated method stub
		System.out.println("서블릿 실행시 제일 먼저 호출되는 메서드(init())");
		System.out.println("생성자와 같은 역할(서블릿의 초기값을 설정할때)");
	}

	/**
	 * @see Servlet#destroy()
	 */
	public void destroy() {
		// TODO Auto-generated method stub
		System.out.println("서블릿이 종료할때 (메모리 해제할때)");
	}

	/**
	 * 요청을 받아서 처리해주는 메서드(request,response){ 기능을 구현}
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		//callBack Method(운영체제가 호출)
		System.out.println("웹상에서 get방식으로 접속할때마다 자동으로 호출되는 메서드");
		//어떤형태의 문서를 보내줄지 결정
		response.setContentType("text/html;charset=utf-8");//html문서+한글데이터
		//PrintWriter out=new PrintWriter(~);
		PrintWriter out=response.getWriter();//객체 생성 3번째 방법
		out.println("<html><head></head>");//document.write("<html><head></head>");
		out.println("<body>");
		//접속시 보여줄 내용을 기술하시오.
		out.println("<h2>Hello Servlet 이연수!!!</h2>");
		//추가
		out.println("<table border=1>");
        for(int i=2;i<=9;i++) {//단
        	out.println("<tr>");
        	for(int j=1;j<10;j++) {
        		out.println("<td>");
        		out.println(""+i+"*"+j+"="+(i*j));
        		out.println("</td>");
        	}
        	out.println("</tr>");
        }
		out.println("</table>");
		out.println("</body>");
		out.println("</html>");
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		System.out.println("웹상에서 post방식으로 접속할때마다 자동으로 호출되는 메서드");
	}

}
====================================
서블릿 실행시 제일 먼저 호출되는 메서드(init)
생성자와 같은 역할(서블릿의 초기값을 설정할때 필요)
2월 18, 2020 11:45:22 오전 org.apache.catalina.core.StandardContext reload
정보: 이름이 [/ServletTest]인 컨텍스트를 다시 로드하는 작업이 시작되었습니다.
서블릿이 종료할때 (메모리 해제될때 자동으로 호출)=>서버의 엔진을 끄지 않은 상태
                                                                        서블릿의 내용을 변경하고 저장
                                                                     변경된 내용을 반영->다시 리로드
                                                                   =>destory()호출된다.

2월 18, 2020 11:45:22 오전 org.apache.catalina.core.StandardContext reload
정보: 이름이 [/ServletTest]인 컨텍스트를 다시 로드하는 것을 완료했습니다.
서블릿 실행시 제일 먼저 호출되는 메서드(init)
생성자와 같은 역할(서블릿의 초기값을 설정할때 필요)


 **  서블릿을 실행시킬때의 요청경로 **

=>http://localhost:8080/ServletTest/HelloTest
                               /프로젝트명/실행시킬 서블릿클래스명  =>URL Mapping부분
                            =>xml 파일 설정=>모델2 (환경설정할때만 필요)=>스프링


http://localhost:8080/ServletTest/test/imsi/HelloTest
                                          =======>가상경로를 지정해서 실행시킬 수도
                                                         있다.(보안때문에)

@WebServlet("어떻게 접근하면 서블릿을 실행시킬수가 있는 상대경로를 지정")
=======================================================
  ===>요청을 받아서 처리해주는 서블릿을 작성=>속도가 빠르다.
                                            JSP 작성 =>서블릿 변환과정->실행
ServletTest
       |
        -src =>GetDate=>서블릿(자바파일)
       |
        -WebContent
                |
                 -sub->send.html(입력)->getdate.jsp (jsp작성)
                |
                 -abc->->getdate.jsp

입력을 받아서 처리해주는 서블릿

  1.입력(요청)html or jsp-------->2.처리(응답) jsp
                                                  getdate.jsp
                                                        or
                                                 서블릿->(GetDate.java)

  send.html

<title>이름,주소 전달</title>
<script>
   function test(){
	   document.form.submit();
   }
</script>
</head>
<body>
<form method="post" action="getdate.jsp">
 이름:<input type="text" name="name"><br>
 주소:<input type="text" name="addr"><br>
 <input type="submit" value="보내기">
 <!-- <input type="button"  value="보내기"  onclick="test()"> -->
</form>
-----------------------------------------------------------------------
get방식=>전달할 페이지명(getdate.jsp)?매개변수명=전달할값&매개변수2=전달할값&
http://localhost:8080/ServletTest/sub/getdate.jsp?name=%ED%85%8C%EC%8A%A4%ED%8A%B8&addr=%EC%84%9C%EC%9A%B8%EC%8B%9C+%EA%B0%95%EB%82%A8%EA%B5%AC+%EB%8C%80%ED%98%84%EB%B9%8C%EB%94%A93%EC%B8%B5
    =>doGet or service()에서 처리해줘야 된다.


getdate.jsp의 소스

<%
     //요청->request,  응답=>response
     request.setCharacterEncoding("utf-8");//한글처리
     
     String name=request.getParameter("name");
     String addr=request.getParameter("addr");
     out.println("name=>"+name+",addr=>"+addr);
  %>

=>서블릿으로 변경해도 결과는 마찬가지

http://localhost:8080/ServletTest/GetDate?name=%ED%85%8C%EC%8A%A4%ED%8A%B8222&addr=%EC%84%9C%EC%9A%B8%EC%8B%9C+%EA%B0%95%EB%B6%81%EA%B5%AC
                            프로젝트명/실행시킬 서블릿클래스명?매개변수=값&~
===================================================
http://localhost:8090/ServletTest/abc/getdate.jsp?name=test&addr=adkadkda
                                                         전송페이지명?매개변수명=값&매개변수2=값2
                          get방식->url창에 전달되는값이 노출->보안에 취약  ==>doGet()
                                         데이터 전달되는 양이 적을때 사용
==================================================
                         post방식->url창에 전달되는값이 노출X ->보안에 적합  ==>doPost()
                                         회원가입시 입력창에 전달
****GetDate.java *****

protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		System.out.println("get,post 요청시 service()가 처리가능합니다.");
		response.setContentType("text/html;charset=utf-8");//html문서(한글처리)
		//2.PrintWriter클래스->메서드의 반환형을 통해서 얻어오기
		PrintWriter out=response.getWriter();
		out.println("<html><head></head>");//document.write("<html>");
		out.println("<body>");
		//추가
		 request.setCharacterEncoding("utf-8");//한글처리
	     
	     String name=request.getParameter("name");
	     String addr=request.getParameter("addr");
	     out.println("name=>"+name+",addr=>"+addr);
		//--------------------------------------------------------
		out.println("</body>");
	    out.println("</html>");
	}
********************************************
http://localhost:8090/ServletTest/HelloTest
                                프로젝트명/실행할 서블릿클래스명
********************************************
** 팝업창을 실행하기 *** =>사이트 접속시마다 팝업창을 화면에 띄우기

ServletTest
        |
         -src->Notice.java(3)->서블릿(파일의 내용을 불러와서 창에
                                                     출력)
        |
         -WebContent->index.jsp(2)->이벤트처리(onload)  
                              or main.jsp   메인페이지(자바스크립트)
                                                 window.open()<-->window.close()(창을 닫기)
                  |                                  창을 열때 사용
                   -notice->  2020218.txt(1)파일->파일입출력
                                 2020219.txt

                               1.서블릿의 개요
                               2.서블릿의 작성 및 조건
                               3.서블릿의 처리메서드(doGet())
                               4.서블릿의 활용 


 index.jsp

<title>메인창을 실행</title>
<script>
   function test(){
	   //형식) window.open(1.불러올 파일명 2.문서의 타이틀제목 3.창의 옵션(width,height,left,top))
	   //window.open('./sub/send.html','w','left=500,top=300,width=400,height=300')
	   window.open('/ServletTest/Notice','w','left=300,top=200,width=400,height=300')
   }
</script>
</head>
<body onload="test()">
  <h2>Welcome To JspStudy Site!!!</h2>
</body>
========================================
Notice.java

protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.setContentType("text/html;charset=utf-8");//한글처리
		PrintWriter out=response.getWriter();
		out.println("<html><head><title>공지사항</title></head>");
		out.println("<body>");
		//notice->2020218.txt
		Calendar cal=Calendar.getInstance();//Date d=new Date();
		String fileName="";//불러올 파일명을 저장
		fileName+=cal.get(Calendar.YEAR);//2020
		fileName+=cal.get(Calendar.MONTH)+1;//0~11+1=>1~12=>20202
		fileName+=cal.get(Calendar.DATE);//18->윤년도 자동계산->2020218
		fileName+=".txt";//2020218.txt
		
		//경로는 절대경로
		String realPath="C:/webtest/4.jsp/sou/ServletTest/WebContent/notice/"+fileName;
		System.out.println("realpath=>"+realPath);
		try {
			//FileInputStream(영문) or FileReader(한글)
			BufferedReader br=new BufferedReader(new FileReader(realPath));
			String line="";//한줄씩 읽어들여서 저장할 변수
			
			while((line=br.readLine())!=null) {//더이상 읽어들일 수 없을때까지
				out.println(line+"<br>");//클라이언트의 브라우저로 전송
			}
			br.close();
		}catch(IOException e) {
			System.out.println("불러올 파일의 경로와 파일명을 확인하세요=>"+e);//e.toString()
		}catch(Exception e) {
			System.out.println("오늘 공지사항이 없습니다."+e);
		}
		//---------------------------------
		out.println("<p align=center>");
		out.println("<hr>");
		out.println("<input type='submit' value='창닫기' onclick='window.close()'> ");
		out.println("</body></html>");
	}
========================================
 예습
 서블릿의 환경설정,내장객체와 액션태그를 읽어오기(ppt 6장,7장)
========================================





