4일차(내장객체,액션태그의 사용법)

<과제> 기존의 jsp파일을 서블릿으로 작성하는 경우
 JspStudy->control->input2.jsp save as input3.jsp(요청)=>ServletTest
               abc/while.jsp---->RepeatServlet.java로 작성=>ServletTest

**input3.jsp**

<h1>문자와 숫자를 매개변수로 전달</h1>
   <form method="post" action="/ServletTest/RepeatServlet">
     반복할 문자열:<input type="text" name="msg" size="20"><p>
     반복할 숫자:<input type="text" name="number" size="20"><p>
     <input type="submit" value="전송">
   </form>
-----------------------------------------------------------------------
RepeatServlet.java=>src폴더에 작성

protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.setContentType("text/html;charset=utf-8");//html문서(한글처리)
		//2.PrintWriter클래스->메서드의 반환형을 통해서 얻어오기
		PrintWriter out=response.getWriter();
		out.println("<html><head></head>");//document.write("<html>");
		out.println("<body>");
		//추가
		 request.setCharacterEncoding("utf-8");//한글처리
	     
		 String msg=request.getParameter("msg");//안녕하세요?
	      int number=Integer.parseInt(request.getParameter("number"));
	      System.out.println("msg=>"+msg+",number="+number);
	      //for,while
	      int count=0;//반복할 횟수 0
	      while(number>count){    //while(5>0) 5>1,5>2,5>3,5>4,5>5
	    	  out.println(msg+"<br>");
	          count++;
	      } 
		out.println("</body>");
	    out.println("</html>");
	}
=============================================

 JspWork =>프로젝트를 생성
      내장객체


http://localhost:8090/JspWork/RequestTest
                               /프로젝트명/실행시킬 서블릿클래스명

  action="../abc/request.jsp"  ->요청을 jsp방식으로 처리하는 경우

  action="/JspWork/RequestTest" ->서블릿이 처리하는 경우

  보안때문에 가상경로=>실제로는 존재하지 않은데 존재하는것 처럼
                                  경로를 설정할 수 있다.

------------------------------------------------------------------------
** 내장객체,액션태그**->include 액션태그(동적 디자인)

** 지시어->3종류
          1.page 지시어 ->서버에 요청하는 문장(속성->값설정)
                                  ** contentType,pageEncoding, import**~

          ** 2.include 지시어->화면디자인을 설계할때 사용 (정적 디자인)
                                                                           **************
                                 ->메서드 사용하는 목적과 비슷(단순,반복)
                                 ->공통으로 자주 사용되는 내용(화면디자인)
                                    =>파일로 만들어서 불러오자
                                 ->상용구처럼 파일로 만들어서 필요로할때
                                    ******************************
                                    불러올 수 있다.(텍스트 가 특정위치에 삽입)
                                   ********************************
          3.taglib 지시어=>모델2에서 적용->2월말~3월초

==========================================
       JspWork                    page   속성명
            |          형식) <%@include file="상대경로 포함해서 불러올 파일명" %>
              -WebContent->includeTest.jsp(1)
                     |
                      -inobject->req.jsp->request객체
                                     res.jsp
                                     input.jsp->arrayprint.jsp(회원가입,배열을 사용)
                     |
                      -action
                     |
                      -bottom->bottom.html(3)
                     |
                      -sub->JspModule.java(2)=>확장자만 java일 뿐 진짜 자바가
                                                           아니다.(텍스트를 복사해서 불러오기)
==============================================
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>include지시어 특징</title>
</head>
<body>
<%@include file="./sub/JspModule.java" %>
  <h3>이 페이지는 include지시어를 연습하기위해서 만들어진 페이지입니다.</h3>
  <h3>테스트중입니다.</h3>
  <h3>테스트중입니다.</h3>
   <%=getString() %>
  <h3>테스트중입니다.</h3>
  <h3>테스트중입니다.</h3>
  <h3>테스트중입니다.</h3>
  <%=getString() %>
  <h3>테스트중입니다.</h3>
  <h3>테스트중입니다.</h3>
  <h3>테스트중입니다.</h3>
  <%=getString() %>
  <h3>테스트중입니다.</h3>
  <h3>테스트중입니다.</h3>
  <h3>테스트중입니다.</h3>
  <h3>테스트중입니다.</h3>
  <h3>테스트중입니다.</h3>
  <h3>테스트중입니다.</h3>
  <%@include file="./bottom/bottom.html" %>
</body>
</html>
********** JSP와 서블릿의 관계*****************************************

**내장 객체(Implicit Object)**

********************************************************************************************
개요->jsp파일내부에서 선언하지 않고도 사용할 수 있는 미리 선언된 객체를 의미한다.
특성=>스크립트릿(<% ~ %>) 안에서만 사용할 수 있다.
********************************************************************************************
내장 객체의 생성
서블릿 컨테이너가 해당 JSP 페이지의 실행 시 자동으로 생성해 준다.

***********순수서블릿**********응용서블릿********

순수서블릿=>개발자가 직접 작성

응용서블릿->jsp파일 생성->서버 내부에서 자동으로 생성이 되는 서블릿
1)
import javax.servlet.*;
import javax.servlet.http.*;
//--------------------------------
import javax.servlet.jsp.*;//서블릿에다가 jsp관련 내용이 추가된 패키지


2)HttpServlet 상속->HttpJspBase상속
   부모                     자식


//선언문에 선언된 문장->멤버변수로 변환
     String str="Testing practice";
     String getString(){
    	 return str;
     }

          init()------------------------------------->_jspInit()
  서블릿 실행시 맨 처음 호출되는 메서드

         destroy()---------------------------------->_jspDestory()
         service()----------------------------------->_jspService()에서 처리
get 또는 post방식으로
 요청시 처리해주는 메서드

//내장객체를 선언하는 구문(8개+2개(request,response)->메서드의 매개변수로 전달
    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;//회원로그인->메모리에 저장
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;//서블릿의 환경설정부분(->모델2)
    javax.servlet.jsp.JspWriter out = null;//데이터 출력(전송)
    final java.lang.Object page = this;//현재 jsp페이지에서만 사용이 가능한 객체
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;
...

try {
    	//내장객체를 생성해서 가져오는 구문
      response.setContentType("text/html; charset=UTF-8");
      //객체를 얻어오는 3번째(메서드의 반환형을 통해서 얻어온다)
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;
*****************************************************

내장 객체가 선언되는 곳

JSP 실행 시 자동 생성되는 서블릿 코드의 (_jspService()) 메소드 내에서 선언된다
                                                      ===========
****************************************************************************************
----------------------------------------------------------------------------------------
1.서버의 도메인 이름을 반환 <%=request.getServerName() %><br>
2.서버의 포트 번호를 반환 <%=request.getServerPort() %><br>

*3.요청된 URL에서 경로를 반환<%=request.getRequestURL() %><br>
*4.요청된 URI에서 경로를 반환<%=request.getRequestURI() %><br>
------------------------------------------------------------------------------
 3.요청된 URL에서 경로를 반환http://localhost:8090/JspWork/inobject/req.jsp
                                          http프로토콜부터 요청문서까지의 경로 전체

 4.요청된 URI에서 경로를 반환/JspWork/inobject/req.jsp
                                        =>/JspWork/inobject/req.jsp (모델2에서 경로)
                                         서버포트이후 부터 요청문서까지의 경로

*5.String getRemoteAddr()(원격ip 주소) <%=request.getRemoteAddr() %><br>

6.클라이언트가 요청한 프로토콜을 반환 <%=request.getProtocol() %><br>
*7.요청 방식(GET, POST)을 반환 <%=request.getMethod() %><br>
 
      getParameter(~),setCharacterEncoding("utf-8");
------------------------------------------------------------------------------------------
<form action="arrayprint.jsp" method="post">
 이름:<input type="text" name="name"><p>
 주소:<input type="text" name="addr"><p>
 좋아하는 동물
 <input type="checkbox" name="pet" value="dog">강아지
   --------------------------->배열의 값
 <input type="checkbox" name="pet" value="cat">고양이
 <input type="checkbox" name="pet" value="pig">돼지
 <p>
 <input type="submit" value="전송">
</form> 

----------------------------------------------------
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>요청받아 처리</title>
</head>
<body>
<%
     request.setCharacterEncoding("utf-8");//한글처리
%>
<%
      String name=request.getParameter("name");
      String addr=request.getParameter("addr");
      //radio->문자열비교->equals()를 이용
%>
name:<%=request.getParameter("name") %>
addr:<%=request.getParameter("addr")%>
<%
 //배열의 값으로 전달->request.getParameterValues("전달받은 매개변수명")
  String values[]=request.getParameterValues("pet");
   if(values!=null){
	   for(int i=0;i<values.length;i++){ %>
		   <%=values[i]%>
<% 
	   }
   }
%>
</html>
----------------------------------------------------
응답객체(=response)=>res.jsp
=>요청한 문서를 찾고 그 문서의 실행결과를 html문서에 담아서 전송할때 필요로하는 객체

 ==>문서의 타입및 한글처리
 response.setContentType("text/html;charset=utf-8");
 response.sendRedirect("경로포함해서 이동할 페이지명");//페이지 이동
---------------------------------------------------------------------------
 1.오라클(SQL구문->DML+join,subQuery)=>2.자바(추상클래스,인터페이스)
 3.jsp

웹프로그래밍=>******페이지 이동시키는 방법(jsp)******* =>기술 면접
                 
1.response객체->

                                    ->http:// 반드시 줄것
 //response.sendRedirect("http://www.chosun.com");  외부의 사이트로 이동
     response.sendRedirect("./req.jsp"); //상대경로를 지정(내부 파일이동)
    =>**URL창이 이동할 페이지로 전환이 되면서 이동이 된다.
    =>**데이터를 서로 공유할 수없다.(데이터를 공유하면서 이동X)

  **결재사이트->페이지 이동->극장장소선택->시간선택->결재수단
                   회원로그인=>비회원로그인

2.forward 액션태그==>모델2의 핵심=>스프링의 기초

    =>외부의 사이트로 이동X
    =>자기 프로젝트의 다른 페이지로만 이동이 가능하다.(O)
    =>**URL창이 이동할 페이지로 전환이 X **
    결론) 데이터를 공유하면서 페이지를 이동시킬 수 가 있다.

-------------------------------------------------------------------
회원로그인->예매페이지 1-->예매페이지 2--->예매페이지 3
                    지역                 상영관 시간        카드,무통장입금
------------------------------------------------------------------
 웹->페이지이동 하면 전의 정보가 사라진다.=>세션처리

  A.jsp=>B.jsp=>C.jsp
 int su=100

3.자바스크립트->location.href="이동할 페이지명"
                        location.replace("http://~이동할 페이지명")

                        history.back()->전의 페이지로 이동
                        history.go(-1)->전의 페이지로 이동
                        history.forward()->앞의 페이지로 이동
============================================
 *** 액션태그의 개요 와 종류 *** 

                                ** forward                  **include액션태그
액션태그=>어떤 기능(페이지 이동,외부의 파일을 불러오는 기능)을 가진 태그
                 메인페이지(index.jsp->top.jsp,bottom.jsp,left,jsp,body.jsp)

            =>객체를 생성,Setter,Getter->태그형태로 만들어서 사용->액션태그
***************************************************************************************

액션태그의 종류->5가지 종류

  ->**8장 (useBean,setProperty,getProperty) =>회원가입,회원수정,게시판의 글쓰기**,
  ->include,forward->메인페이지를 작성
      ------------------------------------- -----------------

액션태그-> JspWork
                      |
                       -WebContent
                                inobject
                                action->form.jsp--->include.jsp---->sub.jsp
                                               요청            응답페이지   응답페이지2

                                   ex)      사장   ----->     부장-------->  과장
                                                       <----부장(처리한 부분) <-------
                                                                     +
                                                               과장(전송 받은 나머지부분)
**************************************
include액션태그를 사용(X) or (O)
include 지시어의 차이점

공통점->둘다 외부의 파일의 내용을 불러와서 특정한 위치에 삽입한다.
차이점->include 액션태그=>동적으로 변경된 내용을 특정한 위치에 삽입(실행결과)
                                         ***************
                                    =>angular or react (새로 고침 F5)

            include 지시어->정적으로 문자열만 복사->특정한 위치에 삽입
                                   **********(변수선언,메서드선언)************
*****
------------------------------------------------------------------------------

형식) <jsp:include page="include.jsp"/> ->시작태그와 종료태그 사이에 내용이
          식별자:액션태그이름     속성명="값"     없음을 표시하는 구분=> />
          (액션태그를 분류할때 사용하는 키워드)

<시작태그><종료태그>=><시작태그 />

         <jsp:include page="include.jsp"></jsp:include page="include.jsp">


      <시작태그> 내용  </종료태그>========><시작태그 />
          <b>내용</b>  ==========><b></b> =><b />

        <c:out ~> ->모델2에서 나오는 용어

        <jsp:include page="include.jsp(이동할 페이지명)"  flush="false">

        flush="false"==>입출력할때 화면에 출력하기전까지 버퍼에 쌓아놓음
                                                                                8kb
         지정한 페이지로 이동할때 현재 작업한 내용을 버퍼에 쌓아놓게 되는데
         이 작업한 내용을 ->현재 브라우저에게 전부 전송하고 지정한 페이지로
          이동유무를 결정해주는 속성(true->브라우저에게 전송 거의 사용X)
           false->계속 보관하는 속성값

        </jsp:include>
------------------------------------------------
<h1>포함을 하는 페이지1</h1>
<%
     request.setCharacterEncoding("utf-8");//한글처리
%>
<!-- sub.jsp에서 실행한 결과내용(삽입)(실행결과)  -->
<jsp:include page="sub.jsp"  flush="false" /><br>
나머지는 sub.jsp가 알아서 해줄거예요!!!
</html>
---------------------------------------------------------------
  sub.jsp

        <식별자:액션태그명 액션태그의 속성명="속성값(경로포함해서 이동할페이지명)"~ />
                                       속성명 순서는 정해져 있지 않음(순서 중요X)
 식별자->액션태그의 종류를 구분하는 인자로 사용된다.
          ex) <c:out~>
-----------------------------------------------------------------------------------
  forward액션태그를 이용해서 페이지를 이동(모델2와 연관)

                         form.jsp (save as)             include.jsp(save as)
         forward->forward.jsp(이동할 페이지명)-->move.jsp-->a.jsp
                           a.jsp                                               b.jsp

 ****************************************************
  forward.jsp

<h1>forward 액션태그 연습</h1>
<form action="move.jsp" method="post">
 이동할 페이지명:<input type="text" name="move"><p>
 <input type="submit" value="보내기">
</form>

 *****************************************************
move.jsp

<body>
  <h1>페이지를 이동시키는 역할</h1>
  <%
       String move=request.getParameter("move");//a.jsp or b.jsp
       System.out.println("move=>"+move);
  %>
  <!-- forward액션태그 page="이동할 페이지명"  -->
  <jsp:forward page="<%=move%>" /><br>
</body>
----------------------------------------------------------------------
a.jsp

<title>a.jsp</title>
</head>
<body bgcolor="yellow">
   <h1>a.jsp로 오신것을 환영합니다.</h1>
</body>

---------------------------------------------------------------------
b.jsp

<title>b.jsp</title>
</head>
<body bgcolor="green">
   <h1>b.jsp로 오신것을 환영합니다.</h1>
</body>
---------------------------------------------------------------------
**move2.jsp**

<h1>요청을 판단해서 올바른 요청이라면 페이지를 이동시키는 역할</h1>
  <%
       int su=100; //->a.jsp에 전달(데이터 공유)
       System.out.println("su=>"+su);
  
       Date d=new Date();//->b.jsp에 데이터공유->b.jsp
       //자바의 자료구조->HashMap(키,값저장)
       //형식)reqest|session|application.setAttribute(키명,저장할값)
       request.setAttribute("total", su);//su(X)->new Integer(su)
       request.setAttribute("cal",d);//<-->request.getAttribute(키명)
       //----------------------------------------------------------
       String move=request.getParameter("move");//a.jsp or b.jsp
       System.out.println("move=>"+move);
       //이동시킬 페이지가 존재->이동 O or 존재X->다시 입력을 받을 수 있도록 코딩
       if(move.equals("a.jsp")){
    	   //response.sendRedirect("a.jsp")//이동만 한다면
  %>
  <!-- forward액션태그 page="이동할 페이지명"  -->
  <jsp:forward page='a.jsp' /><br>
  <%}else if(move.equals("b.jsp")) { %>
  <jsp:forward page='b.jsp' /><br>
  <%}else { %>
   <script>
     alert("당신이 요청하신 페이지는 없습니다.\n확인해서 다시 해보세요!")
     location.href="forward.jsp"
  </script>
  <%}  %>
</body>
</html>
================수정된 a.jsp=================
<body bgcolor="yellow">
   <h1>a.jsp로 오신것을 환영합니다.</h1>
   <%
        int su=200;//자기것->page범위(자기 페이지 범위내에서만 사용->다른 페이지 사용X)
   %>
   자기 페이지에서 선언된 변수 su:<%=su %>
   <hr>
   move2.jsp에서 공유한 su의 값?:<%=request.getAttribute("total") %>
</body>
----------------------수정된 b.jsp----------------------------------
<body bgcolor="green">
   <h1>b.jsp로 오신것을 환영합니다.</h1>
   <hr>
   move2.jsp에서 공유한 날짜객체(d) 값?:<%=request.getAttribute("cal") %>
</body>
----------------------------------------------------------------------
 액션태그->include,forward액션=>데이터공유(월요일)
               useBean,setProperty,getProperty액션태그=>과제
             ->ppt로 예습

 메인페이지를 작성=>include,forward액션

 p752~761 예제(웹에서의 jdbc 연동방법)
*****************************************************

 ****************************************************
HTTP Status 404 – Not Found ->경로포함해서 파일명이 틀린경우
----------------------------------------------------------------------
전철패스(수도권) 서울,경기일부

  **A.jsp (int su=100;)=>현재 보고 있는 페이지에서만 변수사용(default page)
 -------------------------
  B.jsp->2.request(요청--->응답)->하나의 변수를 두페이지에서 공유해서 사용
                                   <---
--------------------->두페이지를 공유해서 사용(요청,응답)
 로그인을 해야 볼 수 있는 페이지-->회원제로 운영하는 사이트
    10페이지->***세션처리 (session)


         





