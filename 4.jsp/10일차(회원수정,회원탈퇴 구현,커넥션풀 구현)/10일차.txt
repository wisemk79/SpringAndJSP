10일차(회원수정,회원탈퇴 구현,커넥션풀 구현)

*************************************************************************
회원수정->1)수정할 데이터를 찾아서 화면에 출력시켜주는 메서드(getMember)
               2)수정하는 메서드 필요->memberUpdate(MemberDTO member)

회원수정->MemberUpdate.jsp(수정할 데이터를 보여줄 페이지)
                                           수정완료
               MemberUpdateProc.jsp(수정할 메서드 호출->테이블 반영)
------------------------------------------------------------------------------
 Register.jsp를 save as  MemberUpdate.jsp로 저장하기
  회원가입폼                 데이터가 들어가 있는 상태에서 편집
**********************************************************************************
1.Login.jsp에서 링크걸기

  같은 폴더에 있는 경우에의 복사방법(이클립스 팁)

2.복사할 페이지를 선택한후 ctrl+c, ctrl+v =>이름을 변경하는 대화상자출력
                                                        MemberUpdate.jsp

  <a href="MemberUpdate.jsp">회원수정</a>
  <a href="DelCheckForm.jsp?mem_id=<%=mem_id%>">회원탈퇴</a>
  <a href="MemberList.jsp">회원리스트</a><!-- 관리자만 사용(admin) -->
**********************************************************************************
//5)회원수정->특정 회원 찾기->nup
	//형식)select * from member where id='nup';
	public MemberDTO  getMember(String mem_id) {
		
		MemberDTO mem=null;//id값에 해당되는 레코드 한개를 저장할 객체선언
		
		try {
			con=pool.getConnection();
			sql="select * from member where id=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setString(1, mem_id);
			rs=pstmt.executeQuery();
			//찾은 레코드가 한개 if(rs.next())  한개이상 ->while(rs.next())
			if(rs.next()) {
				mem=new MemberDTO();
				//찾은 필드값->Setter Method저장->웹에 출력->Getter Method
				mem.setMem_id(rs.getString("id")); //<%=mem.getMem_id()%>
				mem.setMem_passwd(rs.getString("passwd"));
				mem.setMem_name(rs.getString("name"));
				mem.setMem_phone(rs.getString("phone"));
				mem.setMem_zipcode(rs.getString("zipcode"));
				mem.setMem_address(rs.getString("address"));
				mem.setMem_email(rs.getString("e_mail"));
				mem.setMem_job(rs.getString("job"));
			}
		}catch(Exception e) {
			System.out.println("getMember()실행오류=>"+e);//로그파일로 작성->출력
		}finally {
			pool.freeConnection(con,pstmt,rs);
		}
		return mem;
	}
	
	//6)찾은 데이터를 수정->회원가입과 동일
	//update 테이블명 set 필드명=값,,, where 조건식
	public boolean memberUpdate(MemberDTO mem) {
		
		boolean check=false;//회원수정 성공유무
		//2.실행시킬 SQL->반환값 처리
		try {
			con=pool.getConnection();
			//----트랜잭션 처리-----------------------------
			con.setAutoCommit(false);//자동 commit을 하도 못하도록 설정
			//-------------------------------------------------
			sql="update member set passwd=?,name=?,e_mail=?,phone=?,"
					+" zipcode=?,address=?, job=?  where  id=?";
			
			pstmt=con.prepareStatement(sql);
			pstmt.setString(1,mem.getMem_passwd());
			pstmt.setString(2,mem.getMem_name());
			pstmt.setString(3,mem.getMem_email());
			pstmt.setString(4,mem.getMem_phone());
			pstmt.setString(5,mem.getMem_zipcode());
			pstmt.setString(6,mem.getMem_address());
			pstmt.setString(7,mem.getMem_job());
			pstmt.setString(8,mem.getMem_id()); 
			
			int update=pstmt.executeUpdate();//반환 1 (성공), 0 (실패)
			System.out.println("update(데이터 수정유무)=>"+update);
			con.commit();//실질적으로 update 작동된다.
			if(update ==1) {
				check=true;//수정성공
			}
		}catch(Exception e) {
			System.out.println("memberUpdate()실행 에러유발->"+e);
		}finally {
			pool.freeConnection(con,pstmt);//rs는 없다.(select가 아님)
		}
		return check;
	}
---------------------------------------------------------------------------------------
 Register.jsp save as MemberUpdate.jsp

 RegisterProc.jsp(회원가입 해주는 메서드 호출=>MemberUpdateProc.jsp
                                                                save as

<%
  //MemberUpdate.jsp?mem_id='nup' Get방식으로 파라미터값을 전달(입력 O or X 상관)
  //String mem_id=request.getParameter("mem_id");
    String mem_id=(String)session.getAttribute("idKey");//메모리상에서 불러와야 된다.
    System.out.println("MemberUpdate.jsp의 mem_id=>"+mem_id);
    MemberDAO memMgr=new MemberDAO();//메서드 호출하기위해서 
    MemberDTO mem=memMgr.getMember(mem_id);
%>

  ,,,
  <tr> 
            <td colspan="3" align="center"> 
             <input type="submit" value="수정완료"> 
              &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
             <input type="reset" value="다시쓰기"> 
             <input type="button" value="수정취소" onclick="history.back()">
            </td>
          </tr>
          <!--직접 입력을 받는것이 아니기에 hidden객체로 전달 -->
          <input type="hidden" name="mem_id" value="<%=mem_id%>" >
           ******************************************************
        </form>
------------------------------------------------------------------------------------
 MemberInsert.jsp save as MemberUpdateProc.jsp 작성

------------------------------------------------------------------
 <center>
<%
  if(check){  //회원수정에 성공했다면
%>
	 <script>
	      alert("성공적으로 수정되었습니다.");
	      location.href="Login.jsp";
	 </script>
 <%  }else{  %>
	  <script>
	      alert("수정도중 에러가 발생되었습니다.");
	      history.back();
	  </script>
<%   } %>
</center>

*****************************************************
1)Login.jsp에서 메뉴항목을 추가

<b><%=mem_id %></b>님 환영합니다.<p>
    당신은 제한된 기능을 사용할 수가 있습니다.<p>
    <a href="MemberUpdate.jsp">회원수정</a>
    <a href="DelCheckForm.jsp?mem_id=<%=mem_id%>">회원탈퇴</a>
    <a href="MemberList.jsp">회원리스트</a><!-- 관리자 -->
   <a href="Logout.jsp">로그아웃</a>

<!--직접 입력을 받는것이 아니기에 hidden객체로 전달 -->
          <input type="hidden" name="mem_id" value="<%=mem_id%>" >

*****웹상에서 매개변수를 전달하는 방법****(기술면접시)
*******************************************************************

1.링크문자열을 이용해서 페이지 전환할때 사용(직접 입력을 하지 않고도 전달)
 <a href="DelCheckForm.jsp?mem_id=<%=mem_id%>">회원탈퇴</a>

2.Request객체 또는 Session객체를 이용한 데이터 공유방법
<a href="MemberUpdate.jsp">회원수정</a>
 =>String mem_id=(String)session.getAttribute("idKey")
     
----form태그내부에서 입력을 받지 않고 매개변수를 전달하는 방법---
3.<form>태그내부에 <input type="hidden"~>값을 전달하는 경우
   형식) <input type="hidden" name="전달할매개변수명" value="전달할값">
ex)<input type="hidden" name="mem_id" value="<%=mem_id%>" >

  <input type="hidden" name="mem_id" value="<%=mem_id%>" >
    대신에 action속성값에 
     action="이동할페이지명?매개변수명=전달할값&매개변수명2=값2,,,

4.action="delePro.jsp?mem_id=<%=mem_id%>

===========================================

MemberDAO에서의 메서드 작성=>** 회원 탈퇴 **

//7)회원 탈퇴->실행시킬 sql구문이 있다
	//        select passwd from member where id=?
	//형식)delete from member where id='nup';
	public int deleteMember(String id,String passwd) {
		String dbpasswd="";//DB상에서 찾은 암호를 저장
		int x=-1;//회원탈퇴 유무
		
		try {
			con=pool.getConnection();
			con.setAutoCommit(false);//트랜잭션처리
			//1.id값에 해당하는 암호먼저 찾기
			pstmt=con.prepareStatement("select passwd from member where id=?");
			pstmt.setString(1, id);
			rs=pstmt.executeQuery();
			//암호가 존재한다면
			if(rs.next()) {
				dbpasswd=rs.getString("passwd");//rs.getString(1);
				System.out.println("dbpasswd=>"+dbpasswd);
				//dbpasswd(DB상에서 찾은암호)==passwd(웹상에서 입력한 값)
				if(dbpasswd.equals(passwd)) {
					pstmt=con.prepareStatement("delete from member where id=?");
					pstmt.setString(1, id);
					int delete=pstmt.executeUpdate();
					System.out.println("delete(회원탈퇴 성공유무)=>"+delete);
					con.commit();
					x=1;//회원탈퇴 성공
				}else {
					x=0;//회원탈퇴 실패->암호가 틀린경우
				}
			} /*else {
				x=-1;//암호가 존재하지 않은 경우
			} */
		}catch(Exception e) {
			System.out.println("deleteMember() 호출됨=>"+e); //con.rollback();
		}finally {
			pool.freeConnection(con,pstmt,rs);
		}
		return x;//1,0,-1
	}
==============================================
 MemberUpdtaeProc.jsp을 save as deletePro.jsp

 agreement.jsp =>회원약관 페이지 작성하기

 script.js

function memberReg(){ //회원가입창으로 가는 함수
	document.location="agreement.jsp" //Register.jsp
}
브라우저를 IE로 변경시킨뒤에 실행시킬것.
==============================

 커넥션풀=>속도향상과 연관

 웹사이트=>동시접속을 허용

 