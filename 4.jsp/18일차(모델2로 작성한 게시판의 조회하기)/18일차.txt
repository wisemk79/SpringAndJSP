18일차(모델2로 작성한 게시판의 조회하기)

오늘 중간점검 ppt 각조별로 제출->금요일 발표하면서 제출(2차) 모델링(ppt)
4월초 (모델링,UI 구조 마무리)

================================================
http://www.jspstudy.co.kr/main/main.jsp
===========================
   
   프로젝트+새로 추가한 코딩=>구현=>반드시 백업을 하나 만들어서 작업
                                                             (reset)
---------------------------------------------------------------------------------
  list.jsp 추가코딩->list2.jsp 백업파일=>원본파일 선택후 ctrl+c,ctrl+v=>백업파일생성
   추가(X)







 www.jspstudy.co.kr=>bootstrap과 jQuery,jsp로 구성

 기존의 프로그램+새로운 내용을 추가=>백업=>

 1.BoardDAO클래스에 메서드 추가 3개(검색어를 포함한 부분)
 2.액션클래스 수정->ListAction2.java->ListAction.java로 되돌리기
 3.list.jsp->list2.jsp(백업)
======================================

사본작성 방법->파일 선택후 ctrl+c,ctrl+v 입력->ex) list2.jsp 작성

1.list.jsp에 검색어를 추가

<!-- 검색어 추가(자주 검색이 되는 항목을 잘 선택) 
  search(검색분야), searchtext(검색어)
-->
<form name="test" action="/JspBoard2/list.do">
<select name="search">
    <option value="subject">제목</option>
    <option value="subject_content">제목+본문</option>
    <option value="writer">작성자</option>
</select>
<input type="text" size="15" name="searchtext" >&nbsp;
<input type="submit" value="검색" >
</form>
<!--  -->

2.BoardDAO에 메서드 작성(3개)

//(1)게시판의 레코드수를 검색어에 따른 메서드 작성(검색분야,검색어)
	public int getArticleSearchCount(String search,String searchtext) {

		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int x = 0;
                String sql="";
		try {
			con = pool.getConnection();
			System.out.println("con=" + con);
			//검색어를 입력하지 않은 경우(검색분야 선택X)
			if(search==null || search=="") {
			    sql = "select count(*) from board";
			}else {//검색분야(제목,작성자,제목+본문)
				if(search.equals("subject_content")) {
				sql="select count(*) from board  where subject like '%"+
				       searchtext+"%'  or content like '%"+searchtext+"%' ";
				}else { //제목,작성자->매개변수를 이용해서 하나의 sql통합
				sql="select count(*) from board  where "+search+" like '%"+
				       searchtext+"%' ";
				}
			}
			System.out.println("getArticleSearchCount 검색어sql=>"+sql);
			//---------------------------------------
			pstmt = con.prepareStatement(sql);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				x = rs.getInt(1);// 필드명이 아니기때문에 select ~ from사이에 나오는순서
			}
		} catch (Exception e) {
			System.out.println("getArticleSearchCount()메서드 에러유발" + e);
		} finally {
			pool.freeConnection(con, pstmt, rs);
		}
		return x;
	}
============================================
//(2)검색어에 따른 레코드의 범위지정에 대한 메서드

	//   (String search,String searchtext)
	public List getBoardArticles(int start, int end,
			          String search,String searchtext) {

		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List articleList = null; // ArrayList articleList=null;->10개씩
		// List<BoardDTO> articleList=null;
		String sql="";
		try {
			con = pool.getConnection();
			//------------------------------
			if(search==null || search=="") {
			   sql = "select * from board order by ref desc,re_step asc limit ?,?";
			}else {//제목+본문
				if(search.equals("subject_content")) {
					sql="select * from board  where subject like '%"+
					       searchtext+"%'  or content like '%"
				             +searchtext+"%'  order by ref desc,re_step asc limit ?,?";
					}else { //제목,작성자->매개변수를 이용해서 하나의 sql통합
					sql="select * from board  where "+search+" like '%"+
					       searchtext+"%'  order by ref desc,re_step asc limit ?,?";
					}
			}
			//------------------------------------------------------------------------
		    System.out.println("getBoardArticles()의 sql="+sql);
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, start-1);// mysql이 레코드순번은 내부적으로 0부터
			pstmt.setInt(2, end);
			rs = pstmt.executeQuery();
			if (rs.next()) {// 레코드가 존재한다면(1개)
				// articleList=new List(); X
				// articleList=new 자식클래스명();
				articleList = new ArrayList(end);// end갯수만큼 데이터를 담기위해서
				do {
					BoardDTO article = new BoardDTO();
					article.setNum(rs.getInt("num"));// 최대값+1->코딩
					article.setWriter(rs.getString("writer"));
					article.setEmail(rs.getString("email"));
					article.setSubject(rs.getString("subject"));
					article.setPasswd(rs.getString("passwd"));
					article.setReg_date(rs.getTimestamp("reg_date"));// 오늘날짜->코딩 now()
					article.setReadcount(rs.getInt("readcount"));// ->default->0
					article.setRef(rs.getInt("ref"));// 그룹번호->언어
					article.setRe_step(rs.getInt("re_step"));// 답변글순서->언어
					article.setRe_level(rs.getInt("re_level"));// 답변의 깊이
					article.setContent(rs.getString("content"));// 글내용
					article.setIp(rs.getString("ip"));// 글쓴이의 ip주소->request.getRemoteAddr();
					// 추가
					articleList.add(article);
				} while (rs.next());
			}
		} catch (Exception e) {
			System.out.println("getBoardArticleCount()메서드 에러유발" + e);
		} finally {
			pool.freeConnection(con, pstmt, rs);
		}
		return articleList;
	}
--------------------------------------------------------------------------

// (3)페이징 처리를 재조정해주는 메서드작성(ListAction클래스)
	//1.화면에 보여주는 페이지 번호 2.화면에 출력할 레코드갯수
	public Hashtable pageList(String pageNum,int count) {
		
		//1.페이징 처리결과를 저장할 hashtable객체를 선언
		Hashtable<String,Integer> pgList = new Hashtable<String,Integer>();
		
	       int pageSize=5;//numPerPage->페이지당 보여주는 게시물수(=레코드수)->20개이상
	       int blockSize=3;//pagePerBlock->블럭당 보여주는 페이지수
	       
	    //게시판을 맨 처음 실행시키면 무조건 1페이지부터 출력
	    if(pageNum==null){
	    	pageNum="1";//default(무조건 1페이지는 선택하지 않아도 보여줘야 되기때문에)
	    }
	    int currentPage=Integer.parseInt(pageNum);//현재페이지->nowPage
	    //시작레코드번호 ->limit ?,?
	    //                  (1-1)*10+1=1,(2-1)*10+1=11,(3-1)*10+1=21
	    int startRow=(currentPage-1)*pageSize+1;		
	    int endRow=currentPage*pageSize;//1*10=10,2*10=20,3*10=30
	    int number=0;//beginPerPage->페이지별 시작하는 맨 처음에 나오는 ㄱ ㅔ시물 번호
	    System.out.println("현재 레코드수(count)=>"+count);
	    number=count-(currentPage-1)*pageSize;
	    System.out.println("페이지별 number=>"+number);
	    
	    //총페이지수,시작,종료페이지 계산
	    int pageCount=count/pageSize+(count%pageSize==0?0:1);
	       //2.시작페이지 
	       //블럭당 페이지수 계산->10->10배수,3->3의 배수
	       int startPage=0;//1,2,3,,,,10 [다음블럭 10],11,12,,,,,20
	       if(currentPage%blockSize!=0){ //1~9,11~19,21~29,,,
	    	   startPage=currentPage/blockSize*blockSize+1;
	       }else{ //10%10 (10,20,30,40~)
	    	   //             ((10/10)-1)*10+1=1
	    	  startPage=((currentPage/blockSize)-1)*blockSize+1; 
	       }
	       int endPage=startPage+blockSize-1;//1+10-1=10
	       System.out.println("startPage="+startPage+",endPage=>"+endPage);
	       //블럭별로 구분해서 링크걸어서 출력
	       if(endPage > pageCount) 
	    	   endPage=pageCount;//마지막페이지=총페이지수
	    
	    //페이징 처리에 대한 계산결과->Hasthtable->ListAction전달->request->list.jsp출력  
	    //~DAO->실질적인 업무에 관련된 코딩->액션클래스로 전달->view(jsp)에 최종출력
	    pgList.put("pageSize", pageSize);//<->pgList.get("pageSize")
	    pgList.put("blockSize", blockSize);
	    pgList.put("currentPage", currentPage);
	    pgList.put("startRow", startRow);
	    pgList.put("endRow", endRow);
	    pgList.put("count", count);
	    pgList.put("number", number);
	    pgList.put("startPage", startPage);
	    pgList.put("endPage", endPage);
	    pgList.put("pageCount", pageCount);
	    
	    return pgList;
	}
	
===========================================
3.ListAction->/list.do->명령어처리 클래스->액션클래스(스프링)

public String requestPro(HttpServletRequest request, HttpServletResponse response) throws Throwable {
		// TODO Auto-generated method stub
		
		   String pageNum=request.getParameter("pageNum");
		   //추가(검색분야,검색어)
		   String search=request.getParameter("search");
		   String searchtext=request.getParameter("searchtext");
		   
		   int count=0;//총레코드수
		   List articleList=null;//화면에 출력할 레코드데이터
		   
		   BoardDAO dbPro=new BoardDAO();
		   count=dbPro.getArticleSearchCount(search,searchtext);
		   System.out.println("현재 검색된수(count)=>"+count);
		   
		   Hashtable<String,Integer> pgList=dbPro.pageList(pageNum, count);
		   if(count > 0){
			 System.out.println(pgList.get("startRow")+","+pgList.get("endRow"));
			 articleList=dbPro.getBoardArticles(pgList.get("startRow"), 
					                                             pgList.get("pageSize"), 
					                                             search, searchtext);
		   }else {
			   articleList=Collections.EMPTY_LIST;//아무것도 없다는 표시
		   }
		  
		   //2.처리결과->request객체에 저장구문
		   request.setAttribute("search", search);
		   request.setAttribute("searchtext", searchtext);
		   request.setAttribute("pgList", pgList);//페이징처리 10개정보
		   request.setAttribute("articleList", articleList);//${articleList}
		   
		   //3.페이지로 forward로 이동
		return "/list.jsp";  //  /board/list.jsp
	}
------------------------------------------------------------------------------
4.list.jsp에 출력하는 부분(재조정)

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<%@taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
<%@taglib prefix="fmt"  uri="http://java.sun.com/jsp/jstl/fmt" %>
<%
     // int currentPage=(Integer)request.getAttribute("currentPage");//Object->Integer->int
     // Hashtable pgList=(Hashtable)request.getAttribute("pgList");
     //pgList.get("count") =>${pgList.count}
      //${currentPage}
%>
<html>
<head>
<meta charset="UTF-8">
<title>게시판</title>
<link href="style.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#e0ffff">
<center><b>글목록(전체글:${pgList.count})</b>
<table width="700">
<tr>
    <td align="right" bgcolor="#b0e0e6">
    <a href="/JspBoard2/writeForm.do">글쓰기</a>
    </td>
</table>
<!-- 데이터의 유무 -->

<c:if test="${pgList.count==0}">
<table border="1" width="700" cellpadding="0" cellspacing="0" align="center"> 
    <tr>
        <td align="center">게시판에 저장된 글이 없습니다.</td>
    </tr>
</table>
</c:if>
<c:if test="${pgList.count > 0}">
<table border="1" width="700" cellpadding="0" cellspacing="0" align="center"> 
    <tr height="30" bgcolor="#b0e0e6"> 
      <td align="center"  width="50"  >번호 </td> 
      <td align="center"  width="250" >제 목</td> 
      <td align="center"  width="100" >작성자</td>
      <td align="center"  width="150" >작성일</td> 
      <td align="center"  width="50" >조회</td> 
      <td align="center"  width="100" >IP</td>    
    </tr>
    <!--실질적으로 레코드를 출력시켜주는 부분
          이벤트를 발생시킨 객체를 구분하는 키워드->this
      -->
    <c:set var="number" value="${pgList.number}" />
    <c:forEach var="article"  items="${articleList}">
   <tr height="30"  onmouseover="this.style.backgroundColor='white'" 
                            onmouseout="this.style.backgroundColor='#e0ffff'">
    <td align="center"  width="50" >
	    <c:out value="${number}" />
	    <c:set var="number"  value="${number-1}" />
    </td>
    <td  width="250" >
	  <!-- 답변글인 경우 먼저 답변이미지를 부착시키는 코드부분 -->
	  
	  <c:if test="${article.re_level > 0}">
	  <img src="images/level.gif" width="${7*article.re_level}" height="16">
	  <img src="images/re.gif">
	  	</c:if>
	  <c:if test="${article.re_level==0}">
	  <img src="images/level.gif" width="${7*article.re_level}" height="16">       
	  </c:if>
	  
      <a href="/JspBoard2/content.do?num=${article.num}&pageNum=${pgList.currentPage}">
           ${article.subject}</a> 
         <c:if test="${article.readcount >=20}">
         	<img src="images/hot.gif" border="0"  height="16">
         </c:if>
          </td>
    <td align="center"  width="100"> 
       <a href="mailto:${article.email}">${article.writer}</a></td>
    <td align="center"  width="150">
         <fmt:formatDate value="${article.reg_date}" timeStyle="medium"
                                   pattern="yy.MM.dd (hh:mm)" />
   </td>
    <td align="center"  width="50">${article.readcount}</td>
    <td align="center" width="100" >${article.ip}</td>
  </tr>
       </c:forEach>
</table>
</c:if>

<c:if test="${pgList.startPage >pgList.blockSize}">
    <a href="/JspBoard2/list.do?pageNum=${pgList.startPage-pgList.blockSize}&search=${search}&searchtext=${searchtext}">[이전]</a>
</c:if>

<c:forEach var="i" begin="${pgList.startPage}" end="${pgList.endPage}">
    <a href="/JspBoard2/list.do?pageNum=${i}&search=${search}&searchtext=${searchtext}">
      <c:if test="${pgList.currentPage==i}">
                <font color="red"><b>[${i}]</b></font>
      </c:if>
      <c:if test="${pgList.currentPage!=i}">
                ${i}
      </c:if>
    </a>
</c:forEach>

<c:if test="${pgList.endPage < pgList.pageCount}">
    <a href="/JspBoard2/list.do?pageNum=${pgList.startPage+pgList.blockSize}&search=${search}&searchtext=${searchtext}">[다음]</a>
</c:if>

<p>
<!-- 검색어 추가(자주 검색이 되는 항목을 잘 선택) 제목,작성자,제목+본문  -->
<form name="test" action="/JspBoard2/list.do">
   <select name="search">
      <option value="subject">제목</option>
      <option value="subject_content">제목+본문</option>
      <option value="writer">작성자</option>
   </select>
   <input type="text"  size="15" name="searchtext">&nbsp;
   <input type="submit" value="검색">
</form>
</center>
</body>
</html>
=============================================
*** 실행결과 ***

getArticleSearchCount의 검색어 sql=>select count(*) from board where subject like '%모델%' 
현재 검색된 레코드수(count)=>1
현재 레코드수(count)=>1
페이지별 number=>1
startPage=1,endPage=>3
1,5
getBoardArticles()의 sql구문=>select * from board where subject like '%모델%' order by ref desc,re_step asc limit ?,?
이동할 페이지명(view)=>/list.jsp












