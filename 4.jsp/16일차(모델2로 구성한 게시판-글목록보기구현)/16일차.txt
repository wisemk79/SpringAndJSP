16일차(모델2로 구성한 게시판-글목록보기구현)=>모델2(MVC)

3/20일 프로젝트 주제 발표->4:40 시작->발표할 순서 정해줄것(발표 시간 10~15분)

다음주 월요일 3.23일 JSP 쪽지시험-이번주(객관식,재시험 X)-전체 범위 =>4:30분

실제시험 4월1일->JSP,Ajax,jQuery일부(4:30분) 수요일
**********************************************************
 글목록보기,글쓰기,글상세보기,글수정,글삭제=>요청할때 메서드호출
                                                         공통점->요청받아서 처리
                                                                    페이지 이동
                                                         인터페이스 생성->상속=>작성
======== ===========연결만 하면 끝===

Review

 JspBoard2
       |
        -src
           controller
                ControllerAction(4)=>시작(요청받아서 처리해주는 컨트롤러 클래스 작성)
          action                           컨트롤러 =>패키지 컴파일
              CommandAction->requestPro(request,response)

                           상속-------->계속사용(5)
       |
        -WebContent->list.jsp~(el,jstl로 모두 변경)
                 |
                  -WEB-INF->commandPro.properties(2)
                             ->요청명령어->소스코드를 줄이기위해서 파일로 만들어서
                                                   불러오기

                                 /가상경로/~/요청명령어=패키지명.명령어처리클래스

                              #key(command~.do)=value(package...classname)
                               /list.do=action.ListAction

                               #/notice/list.do=

                               #/member/list.do
                           web.xml(3)->컨트롤러 역할을 해주는 서블릿을 지정
                                        ->commandPro.properties 읽어들일 수 있도록
                                           환경설정을 해야 한다.
==========================================
 <!--컨트롤러역할을 하는 서블릿의 이름,요청경로를 지정  -->
  <servlet>
     <servlet-name>서블릿클래스명 동일(별칭)</servlet-name>
     <servlet-class>패키지명..실행시킬 서블릿클래스명</servlet-class>
                ->서블릿이 실행이 될때 맨 처음 초기화 작업을 할때 필요로하는 태그
     <init-param>
          <param-name>propertyConfig(파라미터매개변수명)</param-name>
          <param-value>C:/webtest/4.jsp/sou/JspBoard2/WebContent/WEB-INF/commandPro.properties</param-value>
     </init-param> ->매개변수에 따른 경로 포함해서 불러올 파일명(절대경로)
  </servlet>
  
  <!-- 어떻게 요청이 들어왔을때 처리할 것인가?  -->
  <servlet-mapping>
     <servlet-name>서블릿클래스명 동일</servlet-name>
     <url-pattern>요청명령어를 지정(*.do)</url-pattern>
  </servlet-mapping>
==========================================
 적용예) web.xml
=====
 <!--컨트롤러역할을 하는 서블릿의 이름,요청경로를 지정  -->
  <servlet>
     <servlet-name>ControllerAction</servlet-name>
     <servlet-class>controller.ControllerAction</servlet-class>
     <init-param>
          <param-name>propertyConfig</param-name>
          <param-value>C:/webtest/4.jsp/sou/JspBoard2/WebContent/WEB-INF/commandPro.properties</param-value>
     </init-param>
  </servlet>
  
  <!-- 어떻게 요청이 들어왔을때 처리할 것인가?  -->
  <servlet-mapping>
     <servlet-name>ControllerAction</servlet-name>
     <url-pattern>*.do</url-pattern>
  </servlet-mapping>

==========================================
                          
                         |
                          -lib->standard.jar,jstl.jar복사(1)->jstl문법을 사용=>모델2 구조X

(5)

package action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

//요청명령어에 따라서 처리해주는 모든 클래스의 공통메서드(인터페이스)
public interface CommandAction {
	//이동할 페이지의 경로와 페이지명이 필요->반환=>ModelAndView(스프링)
    public String requestPro(HttpServletRequest request,
    		           HttpServletResponse response)
                                          throws Throwable;
}

package action;

//기능은 다르지만 요청을 받아서 처리해주는 메서드를 공통의 메서드로 작성
//하기위해서 인터페이스를 작성
import javax.servlet.http.*;//HttpServletRequest,HttpServletResponse

public interface CommandAction {
    //이동할 페이지의 경로와 페이지명이 필요(요청에 따라서)->반환값->ModelAndView(스프링)
	public String requestPro(HttpServletRequest request,HttpServletResponse response)
	                                        throws Throwable;
}

=====================================================
//시용자의 요청을 분석해서 해당 작업을 처리
    private void requestPro(HttpServletRequest request,HttpServletResponse response) 
                                         throws ServletException, IOException {
    	
       String view=null;//요청명령어에 따라서 이동할 페이지의 이름저장
       // /list.do=action.ListAction->객체
       //ListAction com=null;  ListAction com=new ListAction();
   	   CommandAction com=null;//어떠한 자식클래스의 객체라도 부모형으로 변환
   	   // CommandAction com=new ListAction();  객체형변환(내부는 자식)
   	   // CommandAction com=new WriteFormAction();
   	   try {
   		   //요청명령어분리->list.jsp
   		   String command=request.getRequestURI();
   		   System.out.println("request.getRequestURI()=>"+request.getRequestURI());
   		   System.out.println("request.getContextPath()=>"+request.getContextPath());
   		   // /JspBoard2/list.do                   /JspBoard
   		   if(command.indexOf(request.getContextPath())==0) {
   			   command=command.substring(request.getContextPath().length());//substring(10)
   			   System.out.println("실질적인 command=>"+command);// /list.do
   		   }
   		   //요청명령어-> /list.do->action.ListAction객체
   		   com=(CommandAction)commandMap.get(command);//get(키명(요청명령어))
   		   System.out.println("com=>"+com);//action.ListAction@주소값
   		   view=com.requestPro(request, response);
   		   System.out.println("view=>"+view);// /list.jsp
   	   }catch(Throwable e) {
   		   throw new ServletException(e);//서블릿예외처리
   	   }
   	   //위에서 요청명령어에 해당하는 view로 데이터를 공유시키면서 이동
   	   RequestDispatcher dispatcher=request.getRequestDispatcher(view);// /list.jsp
   	   dispatcher.forward(request, response);
    }
====================================================
6)DB연동->WEB-INF/dbtest에 저장->mysql.properties 생성

jdbc.drivers=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/mydb?useUnicode=true&characterEncoding=UTF-8
jdbc.username=root
jdbc.password=1234

//(2)dbmysql.properties파일을 읽어들여서 키->값을 불러오기
    public DBConnectionMgr()throws IOException {
    	Properties props=new Properties();
    	FileInputStream in=new FileInputStream
    	("C:/webtest/4.jsp/sou2/JspBoard2/WebContent/WEB-INF/dbtest/dbmysql.properties");
    	props.load(in);//파일의 내용 메모리에 불러오기
    	in.close();
    	_driver=props.getProperty("jdbc.drivers");
    	//드라이브만 시스템에 반영
    	if(_driver!=null) System.setProperty("jdbc.drivers",_driver);
    	//-------------------------------------------------------------------
    	_url=props.getProperty("jdbc.url");
    	_user=props.getProperty("jdbc.username");
    	_password=props.getProperty("jdbc.password");
    	System.out.println("_driver=>"+(_driver)+",_url="+(_url));
    	System.out.println("_user=>"+(_user)+",_password="+(_password));
    }

//(3)커넥션풀을 얻어오는 정적메소드->예외처리
    public static DBConnectionMgr getInstance() throws Exception {
        //커넥션풀이 생성이 안되어있다면
		if (instance == null) {
            synchronized (DBConnectionMgr.class) {
                //생성이 안되어있다면
				if (instance == null) {
					//객체생성
                    instance = new DBConnectionMgr();
                }
            }
        }
        return instance;//호출한 클래스쪽으로 반환
    }
=====>war로 묶어놓음(설계끝)
===================>모델2의 설계 끝====================
http://localhost:8080/JspBoard2/list.jsp =>요청X
                                         /list.do  =>요청O =>모델2 또는 스프링 O

1.글목록보기  /list.do=action.ListAction=>/list.jsp로 이동해서 결과를 출력

 ListAction

/ /list.do=action.ListAction 설정
public class ListAction implements CommandAction {

	@Override
	public String requestPro(HttpServletRequest request, HttpServletResponse response) throws Throwable {
		// TODO Auto-generated method stub
		//1.Jsp에서 담당했던 자바의 코드를 여기에서 실행->자바코드 복사
		
		       int pageSize=10;//numPerPage->페이지당 보여주는 게시물수(=레코드수)->20개이상
		       int blockSize=3;//pagePerBlock->블럭당 보여주는 페이지수
		       
		    //페이징처리에 해당하는 환경설정을 마무리
		    //게시판을 맨 처음 실행시키면 무조건 1페이지부터 출력
		    String pageNum=request.getParameter("pageNum");
		    if(pageNum==null){
		    	pageNum="1";//default(무조건 1페이지는 선택하지 않아도 보여줘야 되기때문에)
		    }
		    int currentPage=Integer.parseInt(pageNum);//현재페이지->nowPage
		    //시작레코드번호 ->limit ?,?
		    //                  (1-1)*10+1=1,(2-1)*10+1=11,(3-1)*10+1=21
		    int startRow=(currentPage-1)*pageSize+1;		
		    int endRow=currentPage*pageSize;//1*10=10,2*10=20,3*10=30
		    int count=0;//총레코드수
		    int number=0;//beginPerPage->페이지별로 시작하는 맨 처음에 나오는 게시물 번호
		    List articleList=null;//화면에 출력할 레코드를 저장할 변수
		    
		    BoardDAO dbPro=new BoardDAO();
		    count=dbPro.getArticleCount();//select count(*) from board
		    System.out.println("현재 레코드수(count)=>"+count);
		    
		    if(count > 0){
		    	articleList=dbPro.getArticles(startRow, pageSize);//첫번째 레코드번호,불러올갯수
		    	                                                                       //endRow(X)
		    }else {
		    	articleList=Collections.EMPTY_LIST;//아무것도 없는 빈 list객체 반환
		    }
		    //            122-(1-1)*10=122,121,120,119,118,117,116,~
		    //            122-(2-1)*10=122-10=
		    number=count-(currentPage-1)*pageSize;
		    System.out.println("페이지별 number=>"+number);
	
		//2.request객체에 저장
		  request.setAttribute("currentPage", currentPage);//int->new Integer(currentPage)
		  request.setAttribute("startRow", startRow);
		  request.setAttribute("count", count);
		  request.setAttribute("pageSize", pageSize);
		  request.setAttribute("blockSize", blockSize);
		  request.setAttribute("number", number);
		  request.setAttribute("articleList", articleList); //${articleList}
		
		//3.공유해서 이동할 수 있도록 설정
		return "/list.jsp";  // /board/list.jsp request.getAttribute("currentPage")=${currentPage}
	}
}
==================================================
 list.jsp->el,jstl을 정리
-------------------------
  메인페이지 작성 ->index.jsp

 <%
      response.sendRedirect("http://localhost:8090/JspBoard2/list.do");
%>

======================페이징 처리 되는 부분을 확인====================
<c:if test="${count > 0 }">
<c:set var="pageCount" value="${count/pageSize+(count%pageSize==0?0:1)}" />
<c:set var="startPage" value="${currentPage-((currentPage-1)%blockSize)}" />
<c:set var="endPage" value="${startPage+blockSize-1}" />
<c:if test="${endPage > pageCount}">
   <c:set var="endPage" value="${endPage=pageCount}" />
</c:if>
<c:if test="${startPage >blockSize}">
    <a href="/JspBoard2/list.do?pageNum=${startPage-blockSize}">[이전]</a>
</c:if>

<c:forEach var="i" begin="${startPage}" end="${endPage}">
    <a href="/JspBoard2/list.do?pageNum=${i}">[${i}]</a>
</c:forEach>
<c:if test="${endPage < pageCount}">
    <a href="/JspBoard2/list.do?pageNum=${startPage+blockSize}">[다음]</a>
</c:if>
</c:if>
============================================
  *** 실행 결과 ***

불러온경로=C:/webtest/4.jsp/sou/JspBoard2/WebContent/WEB-INF/commandPro.properties
요청 command=/list.do
요청 className=action.ListAction
commandClass=class action.ListAction
commandInstance=action.ListAction@4e3c0169
commandMap={/list.do=action.ListAction@4e3c0169}
request.getRequestURI()=>/JspBoard2/list.do
request.getContextPath()=>/JspBoard2
실질적인 요청명령어 command=>/list.do
com=>action.ListAction@4e3c0169
_driver=>com.mysql.jdbc.Driver,_url=jdbc:mysql://192.168.0.101:3306/mydb2?useUnicode=true&characterEncoding=UTF-8
_user=>root,_password=1234
pool=>lys.board.DBConnectionMgr@1c6ece5
con=>com.mysql.jdbc.JDBC4Connection@6a9daaa2
현재 레코드수(count)=>15
페이지별 number=>15
이동할 페이지명(view)=>/list.jsp
================================================





