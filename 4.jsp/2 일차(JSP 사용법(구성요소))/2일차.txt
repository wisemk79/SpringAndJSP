2 일차(JSP 사용법(구성요소) 및 배포 방법)

p76~78 ** 웹어플리케이션의 구조와 내부적인 처리과정 **

** 3장 JSP 페이지의 구성요소=>과제 **
** Jsp페이지의 4대 구성요소 **

 웹페이지를 요청(request)(투수 공을던진다)-------------------->
                 ========
   1.링크문자열 클릭,2.버튼클릭,url
                       html문서<--------서버에서 요청문서찾음-----------응답(response)
                                                                                          포수(공을받음)
                                   <-----------------------------------------

** 웹 서버(Web Server) **

클라이언트의 요청을 받아서 처리한 후 결과를 클라이언트에 전송해 주는 주체
                                         html문서        작업컴퓨터

JSP(Java Server Page)=>서블릿(html+css+javascript)+80%(자바언어)
                                             10~15%

                              ->JSP(html,css,javascript)(80%)+10~15%(자바언어)
                                 =>공통적인 소스코드를 반복(개발자+디자이너)->화면복잡
                              ->소규모 사이트(블러그),중소규모 사이트(모델1)
                              ->사이트규모 커지면==>모델2(->서블릿 하자)=>Spring(모델2)
                          
1.JSP(3장)
2.서블릿

서블릿 기반 위에 보다 편리하게 웹 프로그래밍을 할 수 있도록 만든 동적 웹 페이지 작성 언어
웹 + 자바 프로그래밍 + 소스코드 자동 생성(스크립트)
====================================

  jsp=>html5문서+선언문이 추가된 문서형태
                         ====
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

http://localhost:8080/JspStudy/hello.jsp
프로토콜:localhost
            접속할 도메인:접속할 포트명/프로젝트명/요청을 받아서 보여줄 문서명
            www.naver.com

JspStudy
************************************************************************           
           |
            -Java Resources
                      |
                       -src=>자바파일(->**서블릿파일)이 저장된 곳
                                빈즈파일(웹상에서 불러다 사용하는 파일)이 저장된 영역
            |
              -WebContent(/)->c:/=>메인페이지(index.html, index.jsp
                                                          ===============
                                                                          or  main.jsp
                                                                                   main.jsp)
                                               hello.jsp(1)
                          -images->이미지저장
                          -js
                          abc->imsi.jsp(2)
                                  test.jsp(3)
                             sub->comment.jsp(4)
                                  control->array.jsp(5)
                        |
                         -META-INF=>DB연동할때 사용되는 Xml파일 저장되는곳
                        |
                         -WEB-INF
                              |
                              -lib->외부의 자바의 라이브러리 파일이 저장되는위치
                                          ojdbc6.jar저장
                                |
                                 -web.xml->*웹프로그래밍에서 사용할 환경설정파일*



====================================
***** JSP 4대구성요소  **

http://192.168.0.35:8080/JspStudy/hello.jsp

1.스크립트릿(ScriptLet)->1) 웹상에서 자바코드를 사용할 수 있도록 해주는 영역
                                      간단한 변수(=지역변수),간단한 제어문을 사용
                  <% ~  %> =>2) 태그사용X(자바스크립트 구문 X)=><script></script>
                                     3) 스크립트릿 내부에서는 표현식은 사용불가
                  4) jsp 내부에 여러군데 선언해서 사용이 가능
                  (순차적으로 작성을 해야 된다.=>변수선언=>변수=값
                 (2번째 예제)

  http://localhost:8090/JspStudy/abc/imsi.jsp
                                               =
                                            WebContent

2.표현식(Expression)->간단하게 출력문 대용으로 사용=>자주 사용,반복
                          =>짧게 사용하고 싶다.
                              사용목적:변수값 출력,메서드호출->결과값을 출력
                                           =======
       <% 자바코드 %>
 형식) <%=변수명%> or <%=객체명.일반메서드명(~)%>
                                     표현식 안쪽의 메서드명뒤에 ;을 쓰면 안된다
                                     <%=정적메서드명(~)%>

3.선언문(Declaration)=>모양이 scriptlet과 비슷
 <%! ~  %> =>자바코드를 사용이 가능(**정적 멤버변수 선언)
                    =>****선언된 위치에 상관없이 변수를 불러다 사용 가능(멤버변수)****
                      ->스크립트릿과 선언문의 차이점

                    =>** 메서드를 작성이 가능=>정적메서드 느낌
                            static를 사용X ->느낌은 static처럼 사용
                    =>사용이 가능한데 현실적으로 잘 사용X =>실무에서 잘 사용X
                    =>제한적으로 사용을 한다.
=========================================
/abc/imsi.jsp 확인

<body>
스크립트위에 출력하는 count:<%=count%> 
<%
    // int count=3;
 for(int i=0;i<count;i++){
	 out.println("<h1>JSP 테스트"+i+"!<br>");//docuement.write("<h1>JSP 테스트"+i+"!<br>");
 }
 out.println("count=>"+count);//3
 
%>
스크립트아래에 출력하는 count:<%=count%> 
<%!
   //선언된 위치에 상관없이 페이지에 선언만 해놓으면 언제든지 그 페이지에서 불러다 사용이 가능한
   //변수 또는 메서드를 선언한 영역
       int count=3;
%>
</body>
</html>
==========================================

<%!
     //선언문->jsp전체에서 불러다 사용할 변수,메서드가 필요한 경우에 선언
     String name="홍길동";//static String name;

     public String getName(){
    	 return name;
     }
   ,,,
%>
=============================
<%!
    //변수와 메서드를 jsp페이지에서 자유롭게 불러다 사용하고 싶다.=>선언문
    String name="홍길동";//static String name;
    //메서드는 따로 뽑아내서 클래스를 작성->메서드를 불러와서 작업=>빈즈 클래스
    public String getName(){  //내부 public static String getName(){ return name;}
    	return name;
    }
%>
<html>
<head>
<meta charset="UTF-8">
<title>JSP 3번째 예제(표현식과 선언문의 활용)</title>
</head>
<body>

<%
     float f=2.3f; //소수점은 double->float->강제형변환,변수명 뒤에 f를 줘야 된다.
     int i=Math.round(f);//클래스명.정적메서드명(~)=>2.3=>2
     java.util.Date d=new java.util.Date();//패키지명.하위패키지명...불러올 클래스명~
     out.println("d의 값은?"+d);//d.toString() ->날짜데이터를 문자로 변환해서 출력하라
%>
<hr><p>
정수 f의 반올림은? <%=i%><p>
현재의 날짜와 시간은?<%=d.toString() %>
name의 값은? <%=name %><p>
getName()을 호출? <%=getName()%>
</body>
</html>
====================================

 메서드를 작성->코딩이 길어지고 +화면디자인(html5,css,js)
                   ->디자이너+개발자=>화면 복잡

 =>메서드부분만 =>따로 클래스로 만들어서 웹에서 불러다 사용
                        =>자바빈즈
**************************************************************
  hello.jsp

<% 
    //자바코드를 사용할 수있도록 해주는 영역(=스크립트릿)(변수선언, 간단한 제어문 정도)
    String str="이연수";
    System.out.println("str="+str);//콘솔에 출력(=>디버깅할때 필요)
    out.println("<h1>"+str+"</h1>");//웹에 출력<->document.write("str=>"+str);
    //<h1>test</h1> 내부에 태그를 사용하지 못한다.
 %>

==========================================
 ->클래스를 하나 생성=>작성(1.서블릿(~extends HttpServlet),2.자바빈즈)
 ->Setter ,Getter Method->자바빈즈=>DTO(Data Transfer Object) =>Setter,Getter
                                                   클래스

                                                   ** DAO(Data Access Object) **
                                                                 ->웹상에서 DB에 관련된 메서드만
                                                                     선언된 클래스                                           
==================================================
 =>스크립트릿, 표현식,선언문, 주석 or 지시어
                                        ===
4.주석(=comment)=>Jsp 주석
       WebContent(/)
         abc
           test.jsp
           array.jsp
        sub
           comment.jsp
-----------------------

 주석의 종류

1.눈에 보이는 주석 <!--  --> =>html주석
2.눈에 안보이는 주석 <%--     --%>
3.자바주석 -> // ,  /* ~  */ =>여러줄 주석

 ** 주석을 사용할시 주의할점 **

1.주석내부에 표현식을 사용이 가능하다.
2.주석내부의 표현식안에 자바주석을 사용이 가능하다.
3.주석내부의 표현식을 잘못 사용하시면 에러유발=>주석이라도 에러유발

/sub/comment.jsp

<html>
<!--  JSP 주석연습하는 페이지 -->
<%-- 눈에 안보이는 주석입니다.(외부에서 접속하는 사람들(클라이언트) --%>
<head>
<meta charset="UTF-8">
<title>JSP 4번째예제(주석)</title>
</head>
<!-- 5+3=<%=5+3%> -->
<!-- 9+3=<%=9+3 /* 표현식 내부에 자바주석을 사용이 가능하다.  */%> -->
<!-- 10*3=<%=10*3%> -->
<body bgcolor="yellow">
  <h1>JSP 주석을 확인하는 예제</h1>
</body>
</html>
=====================================
 중간점검 예제

 /abc/array.jsp 작성


============================================

 웹프로그래밍=>1)요청을 해주는 페이지(입력을 받는 경우)
                          ex) 회원가입,로그인

                       2)처리(=응답)해주는 페이지
==================================
 /control
    input.jsp(입력)(디자인)-------->iftest.jsp
           요청(투수)------------------포수(처리)
                     <------
  input.jsp 작성
<html>
<head>
<meta charset="UTF-8">
<title>사용자로부터 값을 입력(전송폼)</title>
</head>
<body>
  <h1>이름,색깔을 입력</h1>
  <form method="post" action="iftest.jsp">
     이름:<input type="text" name="name"><p>
     좋아하는 색깔:
     <select name="color">
        <option value="blue">파란색</option>
        <option value="red">붉은색</option>
        <option value="orange">오렌지색</option>
        <option value="etc">기타</option>
     </select><p>
     <input type="submit" value="보내기">
  </form>
</body>
</html>
==================================
 요청을 받아서 처리해주는 응답페이지(iftest.jsp)

  문자열을 하나 전달
String name=request.getParameter("name");

checkbox로 값을 전달 =>여러개를 전달 
                              배열로 전달->배열의 출력

 String 변수[]=request.getParameterValues("매개변수(배열")

  Integer.parseInt() =>주문수량 2->"2"->2
  Double.parseDouble() =>소수점을 문자형태
                                        "45.6"->45.6

======================================
 ex) 문자열을 입력? a  =>Scanner   =>input2.jsp(요청)<-input.jsp save as
      반복할 횟수? 4 =>숫자를 입력를 받아서 어떻게 처리?

      aaaa                  =>while.jsp(응답)=>반복문
=============================
input2.jsp

<h1>문자와 숫자를 매개변수로 전달</h1>
   <form method="post" action="../abc/while.jsp">
     반복할 문자열:<input type="text" name="msg" size="20"><p>
     반복할 숫   자:<input type="text" name="number" size="20"><p>
     <input type="submit" value="전송">
   </form>

../abc/while.jsp
---------------
<!-- kim에의해서 작성한 페이지   -->
<%@page info="kim에의해서 작성한 페이지" %>

**p72 웹어플리케이션=>war파일로 압축해서 가져가기 **

배포시킬 프로젝트명 오 click
                       export메뉴-->war메뉴 선택

                         경로지정=>프로젝트명.war
                        Export source file->체크->프로젝트에 자바파일을 포함
                                                           시켜서 배포하겠다.

                        Overwrite exisiting file=>기존의 파일의 내용을 지금
                                                         업데이트한 파일로 저장해서
                                                         덮어쓰겠다.
-----------------------------------------------------------------------------
  불러오기 => 오 click=>import->war메뉴선택=>~.war불러오기
                            이미 존재하는 프로젝트명을 선택->이름을 변경
                             시켜서 불러올것
----------------------------------------------------------------------------


 다시 입력
 ********************************
 history.back() =>전의 페이지로 이동하라

  or 

history.go(-1) =>history.go(이동할 순서번호)


<예습>
***************************************************
contentType,pageEncode속성,import 속성(5개 속성 읽어오기)
** include 지시어
서블릿의 개요, 작성법->ppt 2,3장 읽어올것.

 JSP=>내부적으로 서블릿으로 변환되는 과정
***************************************************